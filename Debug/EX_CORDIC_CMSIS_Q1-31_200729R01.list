
EX_CORDIC_CMSIS_Q1-31_200729R01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000231c  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080024f4  080024f4  000124f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002504  08002504  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002504  08002504  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002504  08002504  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002504  08002504  00012504  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002508  08002508  00012508  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800250c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000074  2000000c  08002518  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000080  08002518  00020080  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007daa  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000016b0  00000000  00000000  00027de6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000006c0  00000000  00000000  00029498  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000005d8  00000000  00000000  00029b58  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023e7e  00000000  00000000  0002a130  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000065f9  00000000  00000000  0004dfae  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e24e4  00000000  00000000  000545a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000eb  00000000  00000000  00136a8b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000019e0  00000000  00000000  00136b78  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    00000289  00000000  00000000  00138558  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080024dc 	.word	0x080024dc

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	080024dc 	.word	0x080024dc

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000356:	f1a4 0401 	sub.w	r4, r4, #1
 800035a:	d1e9      	bne.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_d2f>:
 8000590:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000594:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000598:	bf24      	itt	cs
 800059a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800059e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80005a2:	d90d      	bls.n	80005c0 <__aeabi_d2f+0x30>
 80005a4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005a8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80005ac:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80005b0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80005b4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80005b8:	bf08      	it	eq
 80005ba:	f020 0001 	biceq.w	r0, r0, #1
 80005be:	4770      	bx	lr
 80005c0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80005c4:	d121      	bne.n	800060a <__aeabi_d2f+0x7a>
 80005c6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80005ca:	bfbc      	itt	lt
 80005cc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80005d0:	4770      	bxlt	lr
 80005d2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80005da:	f1c2 0218 	rsb	r2, r2, #24
 80005de:	f1c2 0c20 	rsb	ip, r2, #32
 80005e2:	fa10 f30c 	lsls.w	r3, r0, ip
 80005e6:	fa20 f002 	lsr.w	r0, r0, r2
 80005ea:	bf18      	it	ne
 80005ec:	f040 0001 	orrne.w	r0, r0, #1
 80005f0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80005f4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80005f8:	fa03 fc0c 	lsl.w	ip, r3, ip
 80005fc:	ea40 000c 	orr.w	r0, r0, ip
 8000600:	fa23 f302 	lsr.w	r3, r3, r2
 8000604:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000608:	e7cc      	b.n	80005a4 <__aeabi_d2f+0x14>
 800060a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800060e:	d107      	bne.n	8000620 <__aeabi_d2f+0x90>
 8000610:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000614:	bf1e      	ittt	ne
 8000616:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800061a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800061e:	4770      	bxne	lr
 8000620:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000624:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000628:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800062c:	4770      	bx	lr
 800062e:	bf00      	nop

08000630 <__aeabi_f2lz>:
 8000630:	ee07 0a90 	vmov	s15, r0
 8000634:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000638:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800063c:	d401      	bmi.n	8000642 <__aeabi_f2lz+0x12>
 800063e:	f000 b809 	b.w	8000654 <__aeabi_f2ulz>
 8000642:	b508      	push	{r3, lr}
 8000644:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000648:	f000 f804 	bl	8000654 <__aeabi_f2ulz>
 800064c:	4240      	negs	r0, r0
 800064e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000652:	bd08      	pop	{r3, pc}

08000654 <__aeabi_f2ulz>:
 8000654:	b5d0      	push	{r4, r6, r7, lr}
 8000656:	f7ff ff43 	bl	80004e0 <__aeabi_f2d>
 800065a:	2200      	movs	r2, #0
 800065c:	4b0d      	ldr	r3, [pc, #52]	; (8000694 <__aeabi_f2ulz+0x40>)
 800065e:	4606      	mov	r6, r0
 8000660:	460f      	mov	r7, r1
 8000662:	f000 f81b 	bl	800069c <__aeabi_dmul>
 8000666:	f000 fa2b 	bl	8000ac0 <__aeabi_d2uiz>
 800066a:	4604      	mov	r4, r0
 800066c:	f7ff ff16 	bl	800049c <__aeabi_ui2d>
 8000670:	2200      	movs	r2, #0
 8000672:	4b09      	ldr	r3, [pc, #36]	; (8000698 <__aeabi_f2ulz+0x44>)
 8000674:	f000 f812 	bl	800069c <__aeabi_dmul>
 8000678:	4602      	mov	r2, r0
 800067a:	460b      	mov	r3, r1
 800067c:	4630      	mov	r0, r6
 800067e:	4639      	mov	r1, r7
 8000680:	f7ff fdce 	bl	8000220 <__aeabi_dsub>
 8000684:	f000 fa1c 	bl	8000ac0 <__aeabi_d2uiz>
 8000688:	2200      	movs	r2, #0
 800068a:	4623      	mov	r3, r4
 800068c:	4310      	orrs	r0, r2
 800068e:	4619      	mov	r1, r3
 8000690:	bdd0      	pop	{r4, r6, r7, pc}
 8000692:	bf00      	nop
 8000694:	3df00000 	.word	0x3df00000
 8000698:	41f00000 	.word	0x41f00000

0800069c <__aeabi_dmul>:
 800069c:	b570      	push	{r4, r5, r6, lr}
 800069e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80006a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80006a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80006aa:	bf1d      	ittte	ne
 80006ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80006b0:	ea94 0f0c 	teqne	r4, ip
 80006b4:	ea95 0f0c 	teqne	r5, ip
 80006b8:	f000 f8de 	bleq	8000878 <__aeabi_dmul+0x1dc>
 80006bc:	442c      	add	r4, r5
 80006be:	ea81 0603 	eor.w	r6, r1, r3
 80006c2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80006c6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80006ca:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80006ce:	bf18      	it	ne
 80006d0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006dc:	d038      	beq.n	8000750 <__aeabi_dmul+0xb4>
 80006de:	fba0 ce02 	umull	ip, lr, r0, r2
 80006e2:	f04f 0500 	mov.w	r5, #0
 80006e6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006ea:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006ee:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006f2:	f04f 0600 	mov.w	r6, #0
 80006f6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006fa:	f09c 0f00 	teq	ip, #0
 80006fe:	bf18      	it	ne
 8000700:	f04e 0e01 	orrne.w	lr, lr, #1
 8000704:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000708:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800070c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000710:	d204      	bcs.n	800071c <__aeabi_dmul+0x80>
 8000712:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000716:	416d      	adcs	r5, r5
 8000718:	eb46 0606 	adc.w	r6, r6, r6
 800071c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000720:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000724:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000728:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800072c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000730:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000734:	bf88      	it	hi
 8000736:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800073a:	d81e      	bhi.n	800077a <__aeabi_dmul+0xde>
 800073c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000740:	bf08      	it	eq
 8000742:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000746:	f150 0000 	adcs.w	r0, r0, #0
 800074a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800074e:	bd70      	pop	{r4, r5, r6, pc}
 8000750:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000754:	ea46 0101 	orr.w	r1, r6, r1
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	ea81 0103 	eor.w	r1, r1, r3
 8000760:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000764:	bfc2      	ittt	gt
 8000766:	ebd4 050c 	rsbsgt	r5, r4, ip
 800076a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800076e:	bd70      	popgt	{r4, r5, r6, pc}
 8000770:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000774:	f04f 0e00 	mov.w	lr, #0
 8000778:	3c01      	subs	r4, #1
 800077a:	f300 80ab 	bgt.w	80008d4 <__aeabi_dmul+0x238>
 800077e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000782:	bfde      	ittt	le
 8000784:	2000      	movle	r0, #0
 8000786:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800078a:	bd70      	pople	{r4, r5, r6, pc}
 800078c:	f1c4 0400 	rsb	r4, r4, #0
 8000790:	3c20      	subs	r4, #32
 8000792:	da35      	bge.n	8000800 <__aeabi_dmul+0x164>
 8000794:	340c      	adds	r4, #12
 8000796:	dc1b      	bgt.n	80007d0 <__aeabi_dmul+0x134>
 8000798:	f104 0414 	add.w	r4, r4, #20
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f305 	lsl.w	r3, r0, r5
 80007a4:	fa20 f004 	lsr.w	r0, r0, r4
 80007a8:	fa01 f205 	lsl.w	r2, r1, r5
 80007ac:	ea40 0002 	orr.w	r0, r0, r2
 80007b0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80007b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007bc:	fa21 f604 	lsr.w	r6, r1, r4
 80007c0:	eb42 0106 	adc.w	r1, r2, r6
 80007c4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c8:	bf08      	it	eq
 80007ca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ce:	bd70      	pop	{r4, r5, r6, pc}
 80007d0:	f1c4 040c 	rsb	r4, r4, #12
 80007d4:	f1c4 0520 	rsb	r5, r4, #32
 80007d8:	fa00 f304 	lsl.w	r3, r0, r4
 80007dc:	fa20 f005 	lsr.w	r0, r0, r5
 80007e0:	fa01 f204 	lsl.w	r2, r1, r4
 80007e4:	ea40 0002 	orr.w	r0, r0, r2
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007f0:	f141 0100 	adc.w	r1, r1, #0
 80007f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007f8:	bf08      	it	eq
 80007fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007fe:	bd70      	pop	{r4, r5, r6, pc}
 8000800:	f1c4 0520 	rsb	r5, r4, #32
 8000804:	fa00 f205 	lsl.w	r2, r0, r5
 8000808:	ea4e 0e02 	orr.w	lr, lr, r2
 800080c:	fa20 f304 	lsr.w	r3, r0, r4
 8000810:	fa01 f205 	lsl.w	r2, r1, r5
 8000814:	ea43 0302 	orr.w	r3, r3, r2
 8000818:	fa21 f004 	lsr.w	r0, r1, r4
 800081c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000820:	fa21 f204 	lsr.w	r2, r1, r4
 8000824:	ea20 0002 	bic.w	r0, r0, r2
 8000828:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800082c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000830:	bf08      	it	eq
 8000832:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000836:	bd70      	pop	{r4, r5, r6, pc}
 8000838:	f094 0f00 	teq	r4, #0
 800083c:	d10f      	bne.n	800085e <__aeabi_dmul+0x1c2>
 800083e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000842:	0040      	lsls	r0, r0, #1
 8000844:	eb41 0101 	adc.w	r1, r1, r1
 8000848:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800084c:	bf08      	it	eq
 800084e:	3c01      	subeq	r4, #1
 8000850:	d0f7      	beq.n	8000842 <__aeabi_dmul+0x1a6>
 8000852:	ea41 0106 	orr.w	r1, r1, r6
 8000856:	f095 0f00 	teq	r5, #0
 800085a:	bf18      	it	ne
 800085c:	4770      	bxne	lr
 800085e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000862:	0052      	lsls	r2, r2, #1
 8000864:	eb43 0303 	adc.w	r3, r3, r3
 8000868:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800086c:	bf08      	it	eq
 800086e:	3d01      	subeq	r5, #1
 8000870:	d0f7      	beq.n	8000862 <__aeabi_dmul+0x1c6>
 8000872:	ea43 0306 	orr.w	r3, r3, r6
 8000876:	4770      	bx	lr
 8000878:	ea94 0f0c 	teq	r4, ip
 800087c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000880:	bf18      	it	ne
 8000882:	ea95 0f0c 	teqne	r5, ip
 8000886:	d00c      	beq.n	80008a2 <__aeabi_dmul+0x206>
 8000888:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800088c:	bf18      	it	ne
 800088e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000892:	d1d1      	bne.n	8000838 <__aeabi_dmul+0x19c>
 8000894:	ea81 0103 	eor.w	r1, r1, r3
 8000898:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008a6:	bf06      	itte	eq
 80008a8:	4610      	moveq	r0, r2
 80008aa:	4619      	moveq	r1, r3
 80008ac:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008b0:	d019      	beq.n	80008e6 <__aeabi_dmul+0x24a>
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	d102      	bne.n	80008be <__aeabi_dmul+0x222>
 80008b8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80008bc:	d113      	bne.n	80008e6 <__aeabi_dmul+0x24a>
 80008be:	ea95 0f0c 	teq	r5, ip
 80008c2:	d105      	bne.n	80008d0 <__aeabi_dmul+0x234>
 80008c4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80008c8:	bf1c      	itt	ne
 80008ca:	4610      	movne	r0, r2
 80008cc:	4619      	movne	r1, r3
 80008ce:	d10a      	bne.n	80008e6 <__aeabi_dmul+0x24a>
 80008d0:	ea81 0103 	eor.w	r1, r1, r3
 80008d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008d8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008dc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008e0:	f04f 0000 	mov.w	r0, #0
 80008e4:	bd70      	pop	{r4, r5, r6, pc}
 80008e6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008ea:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008ee:	bd70      	pop	{r4, r5, r6, pc}

080008f0 <__aeabi_ddiv>:
 80008f0:	b570      	push	{r4, r5, r6, lr}
 80008f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008fe:	bf1d      	ittte	ne
 8000900:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000904:	ea94 0f0c 	teqne	r4, ip
 8000908:	ea95 0f0c 	teqne	r5, ip
 800090c:	f000 f8a7 	bleq	8000a5e <__aeabi_ddiv+0x16e>
 8000910:	eba4 0405 	sub.w	r4, r4, r5
 8000914:	ea81 0e03 	eor.w	lr, r1, r3
 8000918:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800091c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000920:	f000 8088 	beq.w	8000a34 <__aeabi_ddiv+0x144>
 8000924:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000928:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800092c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000930:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000934:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000938:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800093c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000940:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000944:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000948:	429d      	cmp	r5, r3
 800094a:	bf08      	it	eq
 800094c:	4296      	cmpeq	r6, r2
 800094e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000952:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000956:	d202      	bcs.n	800095e <__aeabi_ddiv+0x6e>
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	1ab6      	subs	r6, r6, r2
 8000960:	eb65 0503 	sbc.w	r5, r5, r3
 8000964:	085b      	lsrs	r3, r3, #1
 8000966:	ea4f 0232 	mov.w	r2, r2, rrx
 800096a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800096e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000972:	ebb6 0e02 	subs.w	lr, r6, r2
 8000976:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097a:	bf22      	ittt	cs
 800097c:	1ab6      	subcs	r6, r6, r2
 800097e:	4675      	movcs	r5, lr
 8000980:	ea40 000c 	orrcs.w	r0, r0, ip
 8000984:	085b      	lsrs	r3, r3, #1
 8000986:	ea4f 0232 	mov.w	r2, r2, rrx
 800098a:	ebb6 0e02 	subs.w	lr, r6, r2
 800098e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000992:	bf22      	ittt	cs
 8000994:	1ab6      	subcs	r6, r6, r2
 8000996:	4675      	movcs	r5, lr
 8000998:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800099c:	085b      	lsrs	r3, r3, #1
 800099e:	ea4f 0232 	mov.w	r2, r2, rrx
 80009a2:	ebb6 0e02 	subs.w	lr, r6, r2
 80009a6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009aa:	bf22      	ittt	cs
 80009ac:	1ab6      	subcs	r6, r6, r2
 80009ae:	4675      	movcs	r5, lr
 80009b0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80009b4:	085b      	lsrs	r3, r3, #1
 80009b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80009ba:	ebb6 0e02 	subs.w	lr, r6, r2
 80009be:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009c2:	bf22      	ittt	cs
 80009c4:	1ab6      	subcs	r6, r6, r2
 80009c6:	4675      	movcs	r5, lr
 80009c8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80009cc:	ea55 0e06 	orrs.w	lr, r5, r6
 80009d0:	d018      	beq.n	8000a04 <__aeabi_ddiv+0x114>
 80009d2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009d6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009da:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009de:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009e2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009e6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009ea:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ee:	d1c0      	bne.n	8000972 <__aeabi_ddiv+0x82>
 80009f0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009f4:	d10b      	bne.n	8000a0e <__aeabi_ddiv+0x11e>
 80009f6:	ea41 0100 	orr.w	r1, r1, r0
 80009fa:	f04f 0000 	mov.w	r0, #0
 80009fe:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a02:	e7b6      	b.n	8000972 <__aeabi_ddiv+0x82>
 8000a04:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a08:	bf04      	itt	eq
 8000a0a:	4301      	orreq	r1, r0
 8000a0c:	2000      	moveq	r0, #0
 8000a0e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a12:	bf88      	it	hi
 8000a14:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a18:	f63f aeaf 	bhi.w	800077a <__aeabi_dmul+0xde>
 8000a1c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a20:	bf04      	itt	eq
 8000a22:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a26:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a2a:	f150 0000 	adcs.w	r0, r0, #0
 8000a2e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a32:	bd70      	pop	{r4, r5, r6, pc}
 8000a34:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a38:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a3c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a40:	bfc2      	ittt	gt
 8000a42:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a46:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a4a:	bd70      	popgt	{r4, r5, r6, pc}
 8000a4c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a50:	f04f 0e00 	mov.w	lr, #0
 8000a54:	3c01      	subs	r4, #1
 8000a56:	e690      	b.n	800077a <__aeabi_dmul+0xde>
 8000a58:	ea45 0e06 	orr.w	lr, r5, r6
 8000a5c:	e68d      	b.n	800077a <__aeabi_dmul+0xde>
 8000a5e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a62:	ea94 0f0c 	teq	r4, ip
 8000a66:	bf08      	it	eq
 8000a68:	ea95 0f0c 	teqeq	r5, ip
 8000a6c:	f43f af3b 	beq.w	80008e6 <__aeabi_dmul+0x24a>
 8000a70:	ea94 0f0c 	teq	r4, ip
 8000a74:	d10a      	bne.n	8000a8c <__aeabi_ddiv+0x19c>
 8000a76:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a7a:	f47f af34 	bne.w	80008e6 <__aeabi_dmul+0x24a>
 8000a7e:	ea95 0f0c 	teq	r5, ip
 8000a82:	f47f af25 	bne.w	80008d0 <__aeabi_dmul+0x234>
 8000a86:	4610      	mov	r0, r2
 8000a88:	4619      	mov	r1, r3
 8000a8a:	e72c      	b.n	80008e6 <__aeabi_dmul+0x24a>
 8000a8c:	ea95 0f0c 	teq	r5, ip
 8000a90:	d106      	bne.n	8000aa0 <__aeabi_ddiv+0x1b0>
 8000a92:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a96:	f43f aefd 	beq.w	8000894 <__aeabi_dmul+0x1f8>
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	e722      	b.n	80008e6 <__aeabi_dmul+0x24a>
 8000aa0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000aa4:	bf18      	it	ne
 8000aa6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000aaa:	f47f aec5 	bne.w	8000838 <__aeabi_dmul+0x19c>
 8000aae:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000ab2:	f47f af0d 	bne.w	80008d0 <__aeabi_dmul+0x234>
 8000ab6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000aba:	f47f aeeb 	bne.w	8000894 <__aeabi_dmul+0x1f8>
 8000abe:	e712      	b.n	80008e6 <__aeabi_dmul+0x24a>

08000ac0 <__aeabi_d2uiz>:
 8000ac0:	004a      	lsls	r2, r1, #1
 8000ac2:	d211      	bcs.n	8000ae8 <__aeabi_d2uiz+0x28>
 8000ac4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ac8:	d211      	bcs.n	8000aee <__aeabi_d2uiz+0x2e>
 8000aca:	d50d      	bpl.n	8000ae8 <__aeabi_d2uiz+0x28>
 8000acc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad4:	d40e      	bmi.n	8000af4 <__aeabi_d2uiz+0x34>
 8000ad6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ada:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ade:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ae6:	4770      	bx	lr
 8000ae8:	f04f 0000 	mov.w	r0, #0
 8000aec:	4770      	bx	lr
 8000aee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000af2:	d102      	bne.n	8000afa <__aeabi_d2uiz+0x3a>
 8000af4:	f04f 30ff 	mov.w	r0, #4294967295
 8000af8:	4770      	bx	lr
 8000afa:	f04f 0000 	mov.w	r0, #0
 8000afe:	4770      	bx	lr

08000b00 <MX_CORDIC_Init>:

CORDIC_HandleTypeDef hcordic;

/* CORDIC init function */
void MX_CORDIC_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0

  hcordic.Instance = CORDIC;
 8000b04:	4b06      	ldr	r3, [pc, #24]	; (8000b20 <MX_CORDIC_Init+0x20>)
 8000b06:	4a07      	ldr	r2, [pc, #28]	; (8000b24 <MX_CORDIC_Init+0x24>)
 8000b08:	601a      	str	r2, [r3, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 8000b0a:	4805      	ldr	r0, [pc, #20]	; (8000b20 <MX_CORDIC_Init+0x20>)
 8000b0c:	f000 fa3a 	bl	8000f84 <HAL_CORDIC_Init>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <MX_CORDIC_Init+0x1a>
  {
    Error_Handler();
 8000b16:	f000 f91c 	bl	8000d52 <Error_Handler>
  }

}
 8000b1a:	bf00      	nop
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	20000030 	.word	0x20000030
 8000b24:	40020c00 	.word	0x40020c00

08000b28 <HAL_CORDIC_MspInit>:

void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* cordicHandle)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b085      	sub	sp, #20
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]

  if(cordicHandle->Instance==CORDIC)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a0a      	ldr	r2, [pc, #40]	; (8000b60 <HAL_CORDIC_MspInit+0x38>)
 8000b36:	4293      	cmp	r3, r2
 8000b38:	d10b      	bne.n	8000b52 <HAL_CORDIC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* CORDIC clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 8000b3a:	4b0a      	ldr	r3, [pc, #40]	; (8000b64 <HAL_CORDIC_MspInit+0x3c>)
 8000b3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b3e:	4a09      	ldr	r2, [pc, #36]	; (8000b64 <HAL_CORDIC_MspInit+0x3c>)
 8000b40:	f043 0308 	orr.w	r3, r3, #8
 8000b44:	6493      	str	r3, [r2, #72]	; 0x48
 8000b46:	4b07      	ldr	r3, [pc, #28]	; (8000b64 <HAL_CORDIC_MspInit+0x3c>)
 8000b48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b4a:	f003 0308 	and.w	r3, r3, #8
 8000b4e:	60fb      	str	r3, [r7, #12]
 8000b50:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CORDIC_MspInit 1 */

  /* USER CODE END CORDIC_MspInit 1 */
  }
}
 8000b52:	bf00      	nop
 8000b54:	3714      	adds	r7, #20
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	40020c00 	.word	0x40020c00
 8000b64:	40021000 	.word	0x40021000

08000b68 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b088      	sub	sp, #32
 8000b6c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b6e:	f107 030c 	add.w	r3, r7, #12
 8000b72:	2200      	movs	r2, #0
 8000b74:	601a      	str	r2, [r3, #0]
 8000b76:	605a      	str	r2, [r3, #4]
 8000b78:	609a      	str	r2, [r3, #8]
 8000b7a:	60da      	str	r2, [r3, #12]
 8000b7c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b7e:	4b1e      	ldr	r3, [pc, #120]	; (8000bf8 <MX_GPIO_Init+0x90>)
 8000b80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b82:	4a1d      	ldr	r2, [pc, #116]	; (8000bf8 <MX_GPIO_Init+0x90>)
 8000b84:	f043 0304 	orr.w	r3, r3, #4
 8000b88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b8a:	4b1b      	ldr	r3, [pc, #108]	; (8000bf8 <MX_GPIO_Init+0x90>)
 8000b8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b8e:	f003 0304 	and.w	r3, r3, #4
 8000b92:	60bb      	str	r3, [r7, #8]
 8000b94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b96:	4b18      	ldr	r3, [pc, #96]	; (8000bf8 <MX_GPIO_Init+0x90>)
 8000b98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b9a:	4a17      	ldr	r2, [pc, #92]	; (8000bf8 <MX_GPIO_Init+0x90>)
 8000b9c:	f043 0320 	orr.w	r3, r3, #32
 8000ba0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ba2:	4b15      	ldr	r3, [pc, #84]	; (8000bf8 <MX_GPIO_Init+0x90>)
 8000ba4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ba6:	f003 0320 	and.w	r3, r3, #32
 8000baa:	607b      	str	r3, [r7, #4]
 8000bac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bae:	4b12      	ldr	r3, [pc, #72]	; (8000bf8 <MX_GPIO_Init+0x90>)
 8000bb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bb2:	4a11      	ldr	r2, [pc, #68]	; (8000bf8 <MX_GPIO_Init+0x90>)
 8000bb4:	f043 0301 	orr.w	r3, r3, #1
 8000bb8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bba:	4b0f      	ldr	r3, [pc, #60]	; (8000bf8 <MX_GPIO_Init+0x90>)
 8000bbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bbe:	f003 0301 	and.w	r3, r3, #1
 8000bc2:	603b      	str	r3, [r7, #0]
 8000bc4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	2120      	movs	r1, #32
 8000bca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bce:	f000 fd79 	bl	80016c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000bd2:	2320      	movs	r3, #32
 8000bd4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bde:	2300      	movs	r3, #0
 8000be0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000be2:	f107 030c 	add.w	r3, r7, #12
 8000be6:	4619      	mov	r1, r3
 8000be8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bec:	f000 fbe8 	bl	80013c0 <HAL_GPIO_Init>

}
 8000bf0:	bf00      	nop
 8000bf2:	3720      	adds	r7, #32
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	40021000 	.word	0x40021000
 8000bfc:	00000000 	.word	0x00000000

08000c00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c00:	b590      	push	{r4, r7, lr}
 8000c02:	b083      	sub	sp, #12
 8000c04:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c06:	f000 f94c 	bl	8000ea2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c0a:	f000 f859 	bl	8000cc0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c0e:	f7ff ffab 	bl	8000b68 <MX_GPIO_Init>
  MX_CORDIC_Init();
 8000c12:	f7ff ff75 	bl	8000b00 <MX_CORDIC_Init>
  /* USER CODE BEGIN 2 */

  /*## Configure the CORDIC peripheral ####################################*/
      sCordicConfig.Function         = CORDIC_FUNCTION_SINE;     /* sine function */
 8000c16:	4b24      	ldr	r3, [pc, #144]	; (8000ca8 <main+0xa8>)
 8000c18:	2201      	movs	r2, #1
 8000c1a:	601a      	str	r2, [r3, #0]
      sCordicConfig.Precision        = CORDIC_PRECISION_15CYCLES; /* max precision for q1.31 sine */
 8000c1c:	4b22      	ldr	r3, [pc, #136]	; (8000ca8 <main+0xa8>)
 8000c1e:	22f0      	movs	r2, #240	; 0xf0
 8000c20:	619a      	str	r2, [r3, #24]
      sCordicConfig.Scale            = CORDIC_SCALE_0;           /* no scale */
 8000c22:	4b21      	ldr	r3, [pc, #132]	; (8000ca8 <main+0xa8>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	605a      	str	r2, [r3, #4]
      sCordicConfig.NbWrite          = CORDIC_NBWRITE_1;         /* One input data: angle. Second input data (modulus) is 1 after cordic reset */
 8000c28:	4b1f      	ldr	r3, [pc, #124]	; (8000ca8 <main+0xa8>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	611a      	str	r2, [r3, #16]
      sCordicConfig.NbRead           = CORDIC_NBREAD_1;          /* One output data: sine */
 8000c2e:	4b1e      	ldr	r3, [pc, #120]	; (8000ca8 <main+0xa8>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	615a      	str	r2, [r3, #20]
      sCordicConfig.InSize           = CORDIC_INSIZE_32BITS;     /* q1.31 format for input data */
 8000c34:	4b1c      	ldr	r3, [pc, #112]	; (8000ca8 <main+0xa8>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	609a      	str	r2, [r3, #8]
      sCordicConfig.OutSize          = CORDIC_OUTSIZE_32BITS;    /* q1.31 format for output data */
 8000c3a:	4b1b      	ldr	r3, [pc, #108]	; (8000ca8 <main+0xa8>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	60da      	str	r2, [r3, #12]

      HAL_CORDIC_Configure(&hcordic, &sCordicConfig);
 8000c40:	4919      	ldr	r1, [pc, #100]	; (8000ca8 <main+0xa8>)
 8000c42:	481a      	ldr	r0, [pc, #104]	; (8000cac <main+0xac>)
 8000c44:	f000 f9d0 	bl	8000fe8 <HAL_CORDIC_Configure>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000c48:	2120      	movs	r1, #32
 8000c4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c4e:	f000 fd51 	bl	80016f4 <HAL_GPIO_TogglePin>
	  arm_float_to_q31(&fangle, &angle31, 1);
 8000c52:	2201      	movs	r2, #1
 8000c54:	4916      	ldr	r1, [pc, #88]	; (8000cb0 <main+0xb0>)
 8000c56:	4817      	ldr	r0, [pc, #92]	; (8000cb4 <main+0xb4>)
 8000c58:	f001 fb4c 	bl	80022f4 <arm_float_to_q31>
	  HAL_CORDIC_Calculate(&hcordic, &angle31, &sine31, 1, 10);
 8000c5c:	230a      	movs	r3, #10
 8000c5e:	9300      	str	r3, [sp, #0]
 8000c60:	2301      	movs	r3, #1
 8000c62:	4a15      	ldr	r2, [pc, #84]	; (8000cb8 <main+0xb8>)
 8000c64:	4912      	ldr	r1, [pc, #72]	; (8000cb0 <main+0xb0>)
 8000c66:	4811      	ldr	r0, [pc, #68]	; (8000cac <main+0xac>)
 8000c68:	f000 f9fa 	bl	8001060 <HAL_CORDIC_Calculate>
	  arm_q31_to_float(&sine31, &fsine, 1);
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	4913      	ldr	r1, [pc, #76]	; (8000cbc <main+0xbc>)
 8000c70:	4811      	ldr	r0, [pc, #68]	; (8000cb8 <main+0xb8>)
 8000c72:	f001 faf9 	bl	8002268 <arm_q31_to_float>
	  fangle  = fangle + 0.096805;
 8000c76:	4b0f      	ldr	r3, [pc, #60]	; (8000cb4 <main+0xb4>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f7ff fc30 	bl	80004e0 <__aeabi_f2d>
 8000c80:	a307      	add	r3, pc, #28	; (adr r3, 8000ca0 <main+0xa0>)
 8000c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c86:	f7ff facd 	bl	8000224 <__adddf3>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	460c      	mov	r4, r1
 8000c8e:	4618      	mov	r0, r3
 8000c90:	4621      	mov	r1, r4
 8000c92:	f7ff fc7d 	bl	8000590 <__aeabi_d2f>
 8000c96:	4602      	mov	r2, r0
 8000c98:	4b06      	ldr	r3, [pc, #24]	; (8000cb4 <main+0xb4>)
 8000c9a:	601a      	str	r2, [r3, #0]
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000c9c:	e7d4      	b.n	8000c48 <main+0x48>
 8000c9e:	bf00      	nop
 8000ca0:	6516db0e 	.word	0x6516db0e
 8000ca4:	3fb8c836 	.word	0x3fb8c836
 8000ca8:	20000060 	.word	0x20000060
 8000cac:	20000030 	.word	0x20000030
 8000cb0:	20000058 	.word	0x20000058
 8000cb4:	2000005c 	.word	0x2000005c
 8000cb8:	2000002c 	.word	0x2000002c
 8000cbc:	20000028 	.word	0x20000028

08000cc0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b094      	sub	sp, #80	; 0x50
 8000cc4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cc6:	f107 0318 	add.w	r3, r7, #24
 8000cca:	2238      	movs	r2, #56	; 0x38
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f001 fbfc 	bl	80024cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cd4:	1d3b      	adds	r3, r7, #4
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	601a      	str	r2, [r3, #0]
 8000cda:	605a      	str	r2, [r3, #4]
 8000cdc:	609a      	str	r2, [r3, #8]
 8000cde:	60da      	str	r2, [r3, #12]
 8000ce0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000ce2:	2000      	movs	r0, #0
 8000ce4:	f000 fd20 	bl	8001728 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ce8:	2301      	movs	r3, #1
 8000cea:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000cec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cf0:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cf2:	2302      	movs	r3, #2
 8000cf4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cf6:	2303      	movs	r3, #3
 8000cf8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8000cfa:	2306      	movs	r3, #6
 8000cfc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000cfe:	2355      	movs	r3, #85	; 0x55
 8000d00:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d02:	2302      	movs	r3, #2
 8000d04:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000d06:	2302      	movs	r3, #2
 8000d08:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000d0a:	2302      	movs	r3, #2
 8000d0c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d0e:	f107 0318 	add.w	r3, r7, #24
 8000d12:	4618      	mov	r0, r3
 8000d14:	f000 fdac 	bl	8001870 <HAL_RCC_OscConfig>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000d1e:	f000 f818 	bl	8000d52 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d22:	230f      	movs	r3, #15
 8000d24:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d26:	2303      	movs	r3, #3
 8000d28:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d32:	2300      	movs	r3, #0
 8000d34:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_8) != HAL_OK)
 8000d36:	1d3b      	adds	r3, r7, #4
 8000d38:	2108      	movs	r1, #8
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f001 f8b0 	bl	8001ea0 <HAL_RCC_ClockConfig>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000d46:	f000 f804 	bl	8000d52 <Error_Handler>
  }
}
 8000d4a:	bf00      	nop
 8000d4c:	3750      	adds	r7, #80	; 0x50
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}

08000d52 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d52:	b480      	push	{r7}
 8000d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000d56:	bf00      	nop
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr

08000d60 <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8000d64:	4b05      	ldr	r3, [pc, #20]	; (8000d7c <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8000d66:	689b      	ldr	r3, [r3, #8]
 8000d68:	4a04      	ldr	r2, [pc, #16]	; (8000d7c <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8000d6a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d6e:	6093      	str	r3, [r2, #8]
}
 8000d70:	bf00      	nop
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	40007000 	.word	0x40007000

08000d80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d86:	4b0f      	ldr	r3, [pc, #60]	; (8000dc4 <HAL_MspInit+0x44>)
 8000d88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d8a:	4a0e      	ldr	r2, [pc, #56]	; (8000dc4 <HAL_MspInit+0x44>)
 8000d8c:	f043 0301 	orr.w	r3, r3, #1
 8000d90:	6613      	str	r3, [r2, #96]	; 0x60
 8000d92:	4b0c      	ldr	r3, [pc, #48]	; (8000dc4 <HAL_MspInit+0x44>)
 8000d94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d96:	f003 0301 	and.w	r3, r3, #1
 8000d9a:	607b      	str	r3, [r7, #4]
 8000d9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d9e:	4b09      	ldr	r3, [pc, #36]	; (8000dc4 <HAL_MspInit+0x44>)
 8000da0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000da2:	4a08      	ldr	r2, [pc, #32]	; (8000dc4 <HAL_MspInit+0x44>)
 8000da4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000da8:	6593      	str	r3, [r2, #88]	; 0x58
 8000daa:	4b06      	ldr	r3, [pc, #24]	; (8000dc4 <HAL_MspInit+0x44>)
 8000dac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000db2:	603b      	str	r3, [r7, #0]
 8000db4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 8000db6:	f7ff ffd3 	bl	8000d60 <LL_PWR_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dba:	bf00      	nop
 8000dbc:	3708      	adds	r7, #8
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	40021000 	.word	0x40021000

08000dc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000dcc:	bf00      	nop
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr

08000dd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dd6:	b480      	push	{r7}
 8000dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dda:	e7fe      	b.n	8000dda <HardFault_Handler+0x4>

08000ddc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000de0:	e7fe      	b.n	8000de0 <MemManage_Handler+0x4>

08000de2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000de2:	b480      	push	{r7}
 8000de4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000de6:	e7fe      	b.n	8000de6 <BusFault_Handler+0x4>

08000de8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dec:	e7fe      	b.n	8000dec <UsageFault_Handler+0x4>

08000dee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dee:	b480      	push	{r7}
 8000df0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000df2:	bf00      	nop
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr

08000dfc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e00:	bf00      	nop
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr

08000e0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e0a:	b480      	push	{r7}
 8000e0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e0e:	bf00      	nop
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr

08000e18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e1c:	f000 f894 	bl	8000f48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e20:	bf00      	nop
 8000e22:	bd80      	pop	{r7, pc}

08000e24 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000e28:	4b08      	ldr	r3, [pc, #32]	; (8000e4c <SystemInit+0x28>)
 8000e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e2e:	4a07      	ldr	r2, [pc, #28]	; (8000e4c <SystemInit+0x28>)
 8000e30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e38:	4b04      	ldr	r3, [pc, #16]	; (8000e4c <SystemInit+0x28>)
 8000e3a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e3e:	609a      	str	r2, [r3, #8]
#endif
}
 8000e40:	bf00      	nop
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	e000ed00 	.word	0xe000ed00

08000e50 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e50:	480d      	ldr	r0, [pc, #52]	; (8000e88 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e52:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e54:	480d      	ldr	r0, [pc, #52]	; (8000e8c <LoopForever+0x6>)
  ldr r1, =_edata
 8000e56:	490e      	ldr	r1, [pc, #56]	; (8000e90 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e58:	4a0e      	ldr	r2, [pc, #56]	; (8000e94 <LoopForever+0xe>)
  movs r3, #0
 8000e5a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000e5c:	e002      	b.n	8000e64 <LoopCopyDataInit>

08000e5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e62:	3304      	adds	r3, #4

08000e64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e68:	d3f9      	bcc.n	8000e5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e6a:	4a0b      	ldr	r2, [pc, #44]	; (8000e98 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e6c:	4c0b      	ldr	r4, [pc, #44]	; (8000e9c <LoopForever+0x16>)
  movs r3, #0
 8000e6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e70:	e001      	b.n	8000e76 <LoopFillZerobss>

08000e72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e74:	3204      	adds	r2, #4

08000e76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e78:	d3fb      	bcc.n	8000e72 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000e7a:	f7ff ffd3 	bl	8000e24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e7e:	f001 fb01 	bl	8002484 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e82:	f7ff febd 	bl	8000c00 <main>

08000e86 <LoopForever>:

LoopForever:
    b LoopForever
 8000e86:	e7fe      	b.n	8000e86 <LoopForever>
  ldr   r0, =_estack
 8000e88:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e90:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e94:	0800250c 	.word	0x0800250c
  ldr r2, =_sbss
 8000e98:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000e9c:	20000080 	.word	0x20000080

08000ea0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ea0:	e7fe      	b.n	8000ea0 <ADC1_2_IRQHandler>

08000ea2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	b082      	sub	sp, #8
 8000ea6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eac:	2003      	movs	r0, #3
 8000eae:	f000 fa55 	bl	800135c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000eb2:	2000      	movs	r0, #0
 8000eb4:	f000 f80e 	bl	8000ed4 <HAL_InitTick>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d002      	beq.n	8000ec4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	71fb      	strb	r3, [r7, #7]
 8000ec2:	e001      	b.n	8000ec8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ec4:	f7ff ff5c 	bl	8000d80 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ec8:	79fb      	ldrb	r3, [r7, #7]

}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	3708      	adds	r7, #8
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
	...

08000ed4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b084      	sub	sp, #16
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000edc:	2300      	movs	r3, #0
 8000ede:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000ee0:	4b16      	ldr	r3, [pc, #88]	; (8000f3c <HAL_InitTick+0x68>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d022      	beq.n	8000f2e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000ee8:	4b15      	ldr	r3, [pc, #84]	; (8000f40 <HAL_InitTick+0x6c>)
 8000eea:	681a      	ldr	r2, [r3, #0]
 8000eec:	4b13      	ldr	r3, [pc, #76]	; (8000f3c <HAL_InitTick+0x68>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000ef4:	fbb1 f3f3 	udiv	r3, r1, r3
 8000ef8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000efc:	4618      	mov	r0, r3
 8000efe:	f000 fa52 	bl	80013a6 <HAL_SYSTICK_Config>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d10f      	bne.n	8000f28 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	2b0f      	cmp	r3, #15
 8000f0c:	d809      	bhi.n	8000f22 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f0e:	2200      	movs	r2, #0
 8000f10:	6879      	ldr	r1, [r7, #4]
 8000f12:	f04f 30ff 	mov.w	r0, #4294967295
 8000f16:	f000 fa2c 	bl	8001372 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f1a:	4a0a      	ldr	r2, [pc, #40]	; (8000f44 <HAL_InitTick+0x70>)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	6013      	str	r3, [r2, #0]
 8000f20:	e007      	b.n	8000f32 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000f22:	2301      	movs	r3, #1
 8000f24:	73fb      	strb	r3, [r7, #15]
 8000f26:	e004      	b.n	8000f32 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	73fb      	strb	r3, [r7, #15]
 8000f2c:	e001      	b.n	8000f32 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f32:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	3710      	adds	r7, #16
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	20000008 	.word	0x20000008
 8000f40:	20000000 	.word	0x20000000
 8000f44:	20000004 	.word	0x20000004

08000f48 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f4c:	4b05      	ldr	r3, [pc, #20]	; (8000f64 <HAL_IncTick+0x1c>)
 8000f4e:	681a      	ldr	r2, [r3, #0]
 8000f50:	4b05      	ldr	r3, [pc, #20]	; (8000f68 <HAL_IncTick+0x20>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4413      	add	r3, r2
 8000f56:	4a03      	ldr	r2, [pc, #12]	; (8000f64 <HAL_IncTick+0x1c>)
 8000f58:	6013      	str	r3, [r2, #0]
}
 8000f5a:	bf00      	nop
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr
 8000f64:	2000007c 	.word	0x2000007c
 8000f68:	20000008 	.word	0x20000008

08000f6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f70:	4b03      	ldr	r3, [pc, #12]	; (8000f80 <HAL_GetTick+0x14>)
 8000f72:	681b      	ldr	r3, [r3, #0]
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	2000007c 	.word	0x2000007c

08000f84 <HAL_CORDIC_Init>:
  * @brief  Initialize the CORDIC peripheral and the associated handle.
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d101      	bne.n	8000f96 <HAL_CORDIC_Init+0x12>
  {
    /* Return error status */
    return HAL_ERROR;
 8000f92:	2301      	movs	r3, #1
 8000f94:	e023      	b.n	8000fde <HAL_CORDIC_Init+0x5a>

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d106      	bne.n	8000fb0 <HAL_CORDIC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcordic->Lock = HAL_UNLOCKED;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize the low level hardware */
    HAL_CORDIC_MspInit(hcordic);
 8000faa:	6878      	ldr	r0, [r7, #4]
 8000fac:	f7ff fdbc 	bl	8000b28 <HAL_CORDIC_MspInit>
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset pInBuff and pOutBuff */
  hcordic->pInBuff = NULL;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2200      	movs	r2, #0
 8000fba:	605a      	str	r2, [r3, #4]
  hcordic->pOutBuff = NULL;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	609a      	str	r2, [r3, #8]

  /* Reset NbCalcToOrder and NbCalcToGet */
  hcordic->NbCalcToOrder = 0U;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	60da      	str	r2, [r3, #12]
  hcordic->NbCalcToGet = 0U;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2200      	movs	r2, #0
 8000fcc:	611a      	str	r2, [r3, #16]

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	615a      	str	r2, [r3, #20]

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Return function status */
  return HAL_OK;
 8000fdc:	2300      	movs	r3, #0
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	3708      	adds	r7, #8
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
	...

08000fe8 <HAL_CORDIC_Configure>:
  * @param  sConfig pointer to a CORDIC_ConfigTypeDef structure that
  *         contains the CORDIC configuration information.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Configure(CORDIC_HandleTypeDef *hcordic, CORDIC_ConfigTypeDef *sConfig)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b085      	sub	sp, #20
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
 8000ff0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_CORDIC_NBREAD(sConfig->NbRead));
  assert_param(IS_CORDIC_INSIZE(sConfig->InSize));
  assert_param(IS_CORDIC_OUTSIZE(sConfig->OutSize));

  /* Check handle state is ready */
  if (hcordic->State == HAL_CORDIC_STATE_READY)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	2b01      	cmp	r3, #1
 8001000:	d11d      	bne.n	800103e <HAL_CORDIC_Configure+0x56>
  {
    /* Apply all configuration parameters in CORDIC control register */
    MODIFY_REG(hcordic->Instance->CSR,                                                         \
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	681a      	ldr	r2, [r3, #0]
 8001008:	4b14      	ldr	r3, [pc, #80]	; (800105c <HAL_CORDIC_Configure+0x74>)
 800100a:	4013      	ands	r3, r2
 800100c:	683a      	ldr	r2, [r7, #0]
 800100e:	6811      	ldr	r1, [r2, #0]
 8001010:	683a      	ldr	r2, [r7, #0]
 8001012:	6992      	ldr	r2, [r2, #24]
 8001014:	4311      	orrs	r1, r2
 8001016:	683a      	ldr	r2, [r7, #0]
 8001018:	6852      	ldr	r2, [r2, #4]
 800101a:	4311      	orrs	r1, r2
 800101c:	683a      	ldr	r2, [r7, #0]
 800101e:	6912      	ldr	r2, [r2, #16]
 8001020:	4311      	orrs	r1, r2
 8001022:	683a      	ldr	r2, [r7, #0]
 8001024:	6952      	ldr	r2, [r2, #20]
 8001026:	4311      	orrs	r1, r2
 8001028:	683a      	ldr	r2, [r7, #0]
 800102a:	6892      	ldr	r2, [r2, #8]
 800102c:	4311      	orrs	r1, r2
 800102e:	683a      	ldr	r2, [r7, #0]
 8001030:	68d2      	ldr	r2, [r2, #12]
 8001032:	4311      	orrs	r1, r2
 8001034:	687a      	ldr	r2, [r7, #4]
 8001036:	6812      	ldr	r2, [r2, #0]
 8001038:	430b      	orrs	r3, r1
 800103a:	6013      	str	r3, [r2, #0]
 800103c:	e007      	b.n	800104e <HAL_CORDIC_Configure+0x66>
                sConfig->NbWrite | sConfig->NbRead | sConfig->InSize | sConfig->OutSize));
  }
  else
  {
    /* Set CORDIC error code */
    hcordic->ErrorCode |= HAL_CORDIC_ERROR_NOT_READY;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001042:	f043 0202 	orr.w	r2, r3, #2
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return error status */
    status = HAL_ERROR;
 800104a:	2301      	movs	r3, #1
 800104c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800104e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001050:	4618      	mov	r0, r3
 8001052:	3714      	adds	r7, #20
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr
 800105c:	ff87f800 	.word	0xff87f800

08001060 <HAL_CORDIC_Calculate>:
  * @param  NbCalc Number of CORDIC calculation to process.
  * @param  Timeout Specify Timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Calculate(CORDIC_HandleTypeDef *hcordic, int32_t *pInBuff, int32_t *pOutBuff, uint32_t NbCalc, uint32_t Timeout)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b088      	sub	sp, #32
 8001064:	af00      	add	r7, sp, #0
 8001066:	60f8      	str	r0, [r7, #12]
 8001068:	60b9      	str	r1, [r7, #8]
 800106a:	607a      	str	r2, [r7, #4]
 800106c:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t index;
  int32_t *p_tmp_in_buff = pInBuff;
 800106e:	68bb      	ldr	r3, [r7, #8]
 8001070:	617b      	str	r3, [r7, #20]
  int32_t *p_tmp_out_buff = pOutBuff;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	613b      	str	r3, [r7, #16]

  /* Check parameters setting */
  if ((pInBuff == NULL) || (pOutBuff == NULL) || (NbCalc == 0U))
 8001076:	68bb      	ldr	r3, [r7, #8]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d005      	beq.n	8001088 <HAL_CORDIC_Calculate+0x28>
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d002      	beq.n	8001088 <HAL_CORDIC_Calculate+0x28>
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d107      	bne.n	8001098 <HAL_CORDIC_Calculate+0x38>
  {
    /* Update the error code */
    hcordic->ErrorCode |= HAL_CORDIC_ERROR_PARAM;
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800108c:	f043 0201 	orr.w	r2, r3, #1
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return error status */
    return HAL_ERROR;
 8001094:	2301      	movs	r3, #1
 8001096:	e058      	b.n	800114a <HAL_CORDIC_Calculate+0xea>
  }

  /* Check handle state is ready */
  if (hcordic->State == HAL_CORDIC_STATE_READY)
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800109e:	b2db      	uxtb	r3, r3
 80010a0:	2b01      	cmp	r3, #1
 80010a2:	d14b      	bne.n	800113c <HAL_CORDIC_Calculate+0xdc>
  {
    /* Reset CORDIC error code */
    hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	2200      	movs	r2, #0
 80010a8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Change the CORDIC state */
    hcordic->State = HAL_CORDIC_STATE_BUSY;
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	2202      	movs	r2, #2
 80010ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Get tick */
    tickstart = HAL_GetTick();
 80010b2:	f7ff ff5b 	bl	8000f6c <HAL_GetTick>
 80010b6:	61b8      	str	r0, [r7, #24]

    /* Write of input data in Write Data register, and increment input buffer pointer */
    CORDIC_WriteInDataIncrementPtr(hcordic, &p_tmp_in_buff);
 80010b8:	f107 0314 	add.w	r3, r7, #20
 80010bc:	4619      	mov	r1, r3
 80010be:	68f8      	ldr	r0, [r7, #12]
 80010c0:	f000 f847 	bl	8001152 <CORDIC_WriteInDataIncrementPtr>

    /* Calculation is started.
       Provide next set of input data, until number of calculation is achieved */
    for (index = (NbCalc - 1U); index > 0U; index--)
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	3b01      	subs	r3, #1
 80010c8:	61fb      	str	r3, [r7, #28]
 80010ca:	e028      	b.n	800111e <HAL_CORDIC_Calculate+0xbe>
    {
      /* Write of input data in Write Data register, and increment input buffer pointer */
      CORDIC_WriteInDataIncrementPtr(hcordic, &p_tmp_in_buff);
 80010cc:	f107 0314 	add.w	r3, r7, #20
 80010d0:	4619      	mov	r1, r3
 80010d2:	68f8      	ldr	r0, [r7, #12]
 80010d4:	f000 f83d 	bl	8001152 <CORDIC_WriteInDataIncrementPtr>

      /* Wait for RRDY flag to be raised */
      do
      {
        /* Check for the Timeout */
        if (Timeout != HAL_MAX_DELAY)
 80010d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010de:	d010      	beq.n	8001102 <HAL_CORDIC_Calculate+0xa2>
        {
          if ((HAL_GetTick() - tickstart) > Timeout)
 80010e0:	f7ff ff44 	bl	8000f6c <HAL_GetTick>
 80010e4:	4602      	mov	r2, r0
 80010e6:	69bb      	ldr	r3, [r7, #24]
 80010e8:	1ad3      	subs	r3, r2, r3
 80010ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80010ec:	429a      	cmp	r2, r3
 80010ee:	d208      	bcs.n	8001102 <HAL_CORDIC_Calculate+0xa2>
          {
            /* Set CORDIC error code */
            hcordic->ErrorCode = HAL_CORDIC_ERROR_TIMEOUT;
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	2204      	movs	r2, #4
 80010f4:	625a      	str	r2, [r3, #36]	; 0x24

            /* Change the CORDIC state */
            hcordic->State = HAL_CORDIC_STATE_READY;
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	2201      	movs	r2, #1
 80010fa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

            /* Return function status */
            return HAL_ERROR;
 80010fe:	2301      	movs	r3, #1
 8001100:	e023      	b.n	800114a <HAL_CORDIC_Calculate+0xea>
          }
        }
      }
      while (HAL_IS_BIT_CLR(hcordic->Instance->CSR, CORDIC_CSR_RRDY));
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	dae5      	bge.n	80010d8 <HAL_CORDIC_Calculate+0x78>

      /* Read output data from Read Data register, and increment output buffer pointer */
      CORDIC_ReadOutDataIncrementPtr(hcordic, &p_tmp_out_buff);
 800110c:	f107 0310 	add.w	r3, r7, #16
 8001110:	4619      	mov	r1, r3
 8001112:	68f8      	ldr	r0, [r7, #12]
 8001114:	f000 f846 	bl	80011a4 <CORDIC_ReadOutDataIncrementPtr>
    for (index = (NbCalc - 1U); index > 0U; index--)
 8001118:	69fb      	ldr	r3, [r7, #28]
 800111a:	3b01      	subs	r3, #1
 800111c:	61fb      	str	r3, [r7, #28]
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d1d3      	bne.n	80010cc <HAL_CORDIC_Calculate+0x6c>
    }

    /* Read output data from Read Data register, and increment output buffer pointer */
    CORDIC_ReadOutDataIncrementPtr(hcordic, &p_tmp_out_buff);
 8001124:	f107 0310 	add.w	r3, r7, #16
 8001128:	4619      	mov	r1, r3
 800112a:	68f8      	ldr	r0, [r7, #12]
 800112c:	f000 f83a 	bl	80011a4 <CORDIC_ReadOutDataIncrementPtr>

    /* Change the CORDIC state */
    hcordic->State = HAL_CORDIC_STATE_READY;
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	2201      	movs	r2, #1
 8001134:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Return function status */
    return HAL_OK;
 8001138:	2300      	movs	r3, #0
 800113a:	e006      	b.n	800114a <HAL_CORDIC_Calculate+0xea>
  }
  else
  {
    /* Set CORDIC error code */
    hcordic->ErrorCode |= HAL_CORDIC_ERROR_NOT_READY;
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001140:	f043 0202 	orr.w	r2, r3, #2
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_ERROR;
 8001148:	2301      	movs	r3, #1
  }
}
 800114a:	4618      	mov	r0, r3
 800114c:	3720      	adds	r7, #32
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}

08001152 <CORDIC_WriteInDataIncrementPtr>:
  *         the configuration information for CORDIC module.
  * @param  ppInBuff Pointer to pointer to input buffer.
  * @retval none
  */
static void CORDIC_WriteInDataIncrementPtr(CORDIC_HandleTypeDef *hcordic, int32_t **ppInBuff)
{
 8001152:	b480      	push	{r7}
 8001154:	b083      	sub	sp, #12
 8001156:	af00      	add	r7, sp, #0
 8001158:	6078      	str	r0, [r7, #4]
 800115a:	6039      	str	r1, [r7, #0]
  /* First write of input data in the Write Data register */
  WRITE_REG(hcordic->Instance->WDATA, (uint32_t) **ppInBuff);
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	605a      	str	r2, [r3, #4]

  /* Increment input data pointer */
  (*ppInBuff)++;
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	1d1a      	adds	r2, r3, #4
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	601a      	str	r2, [r3, #0]

  /* Check if second write of input data is expected */
  if (HAL_IS_BIT_SET(hcordic->Instance->CSR, CORDIC_CSR_NARGS))
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800117c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001180:	d10a      	bne.n	8001198 <CORDIC_WriteInDataIncrementPtr+0x46>
  {
    /* Second write of input data in the Write Data register */
    WRITE_REG(hcordic->Instance->WDATA, (uint32_t) **ppInBuff);
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	605a      	str	r2, [r3, #4]

    /* Increment input data pointer */
    (*ppInBuff)++;
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	1d1a      	adds	r2, r3, #4
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	601a      	str	r2, [r3, #0]
  }
}
 8001198:	bf00      	nop
 800119a:	370c      	adds	r7, #12
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr

080011a4 <CORDIC_ReadOutDataIncrementPtr>:
  *         the configuration information for CORDIC module.
  * @param  ppOutBuff Pointer to pointer to output buffer.
  * @retval none
  */
static void CORDIC_ReadOutDataIncrementPtr(CORDIC_HandleTypeDef *hcordic, int32_t **ppOutBuff)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
 80011ac:	6039      	str	r1, [r7, #0]
  /* First read of output data from the Read Data register */
  **ppOutBuff = (int32_t)READ_REG(hcordic->Instance->RDATA);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	689a      	ldr	r2, [r3, #8]
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	601a      	str	r2, [r3, #0]

  /* Increment output data pointer */
  (*ppOutBuff)++;
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	1d1a      	adds	r2, r3, #4
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	601a      	str	r2, [r3, #0]

  /* Check if second read of output data is expected */
  if (HAL_IS_BIT_SET(hcordic->Instance->CSR, CORDIC_CSR_NRES))
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80011ce:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80011d2:	d10a      	bne.n	80011ea <CORDIC_ReadOutDataIncrementPtr+0x46>
  {
    /* Second read of output data from the Read Data register */
    **ppOutBuff = (int32_t)READ_REG(hcordic->Instance->RDATA);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	689a      	ldr	r2, [r3, #8]
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	601a      	str	r2, [r3, #0]

    /* Increment output data pointer */
    (*ppOutBuff)++;
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	1d1a      	adds	r2, r3, #4
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	601a      	str	r2, [r3, #0]
  }
}
 80011ea:	bf00      	nop
 80011ec:	370c      	adds	r7, #12
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
	...

080011f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b085      	sub	sp, #20
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	f003 0307 	and.w	r3, r3, #7
 8001206:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001208:	4b0c      	ldr	r3, [pc, #48]	; (800123c <__NVIC_SetPriorityGrouping+0x44>)
 800120a:	68db      	ldr	r3, [r3, #12]
 800120c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800120e:	68ba      	ldr	r2, [r7, #8]
 8001210:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001214:	4013      	ands	r3, r2
 8001216:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001220:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001224:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001228:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800122a:	4a04      	ldr	r2, [pc, #16]	; (800123c <__NVIC_SetPriorityGrouping+0x44>)
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	60d3      	str	r3, [r2, #12]
}
 8001230:	bf00      	nop
 8001232:	3714      	adds	r7, #20
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr
 800123c:	e000ed00 	.word	0xe000ed00

08001240 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001244:	4b04      	ldr	r3, [pc, #16]	; (8001258 <__NVIC_GetPriorityGrouping+0x18>)
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	0a1b      	lsrs	r3, r3, #8
 800124a:	f003 0307 	and.w	r3, r3, #7
}
 800124e:	4618      	mov	r0, r3
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr
 8001258:	e000ed00 	.word	0xe000ed00

0800125c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	4603      	mov	r3, r0
 8001264:	6039      	str	r1, [r7, #0]
 8001266:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001268:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126c:	2b00      	cmp	r3, #0
 800126e:	db0a      	blt.n	8001286 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	b2da      	uxtb	r2, r3
 8001274:	490c      	ldr	r1, [pc, #48]	; (80012a8 <__NVIC_SetPriority+0x4c>)
 8001276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800127a:	0112      	lsls	r2, r2, #4
 800127c:	b2d2      	uxtb	r2, r2
 800127e:	440b      	add	r3, r1
 8001280:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001284:	e00a      	b.n	800129c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	b2da      	uxtb	r2, r3
 800128a:	4908      	ldr	r1, [pc, #32]	; (80012ac <__NVIC_SetPriority+0x50>)
 800128c:	79fb      	ldrb	r3, [r7, #7]
 800128e:	f003 030f 	and.w	r3, r3, #15
 8001292:	3b04      	subs	r3, #4
 8001294:	0112      	lsls	r2, r2, #4
 8001296:	b2d2      	uxtb	r2, r2
 8001298:	440b      	add	r3, r1
 800129a:	761a      	strb	r2, [r3, #24]
}
 800129c:	bf00      	nop
 800129e:	370c      	adds	r7, #12
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr
 80012a8:	e000e100 	.word	0xe000e100
 80012ac:	e000ed00 	.word	0xe000ed00

080012b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b089      	sub	sp, #36	; 0x24
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	60f8      	str	r0, [r7, #12]
 80012b8:	60b9      	str	r1, [r7, #8]
 80012ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	f003 0307 	and.w	r3, r3, #7
 80012c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012c4:	69fb      	ldr	r3, [r7, #28]
 80012c6:	f1c3 0307 	rsb	r3, r3, #7
 80012ca:	2b04      	cmp	r3, #4
 80012cc:	bf28      	it	cs
 80012ce:	2304      	movcs	r3, #4
 80012d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	3304      	adds	r3, #4
 80012d6:	2b06      	cmp	r3, #6
 80012d8:	d902      	bls.n	80012e0 <NVIC_EncodePriority+0x30>
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	3b03      	subs	r3, #3
 80012de:	e000      	b.n	80012e2 <NVIC_EncodePriority+0x32>
 80012e0:	2300      	movs	r3, #0
 80012e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012e4:	f04f 32ff 	mov.w	r2, #4294967295
 80012e8:	69bb      	ldr	r3, [r7, #24]
 80012ea:	fa02 f303 	lsl.w	r3, r2, r3
 80012ee:	43da      	mvns	r2, r3
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	401a      	ands	r2, r3
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012f8:	f04f 31ff 	mov.w	r1, #4294967295
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001302:	43d9      	mvns	r1, r3
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001308:	4313      	orrs	r3, r2
         );
}
 800130a:	4618      	mov	r0, r3
 800130c:	3724      	adds	r7, #36	; 0x24
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
	...

08001318 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	3b01      	subs	r3, #1
 8001324:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001328:	d301      	bcc.n	800132e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800132a:	2301      	movs	r3, #1
 800132c:	e00f      	b.n	800134e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800132e:	4a0a      	ldr	r2, [pc, #40]	; (8001358 <SysTick_Config+0x40>)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	3b01      	subs	r3, #1
 8001334:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001336:	210f      	movs	r1, #15
 8001338:	f04f 30ff 	mov.w	r0, #4294967295
 800133c:	f7ff ff8e 	bl	800125c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001340:	4b05      	ldr	r3, [pc, #20]	; (8001358 <SysTick_Config+0x40>)
 8001342:	2200      	movs	r2, #0
 8001344:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001346:	4b04      	ldr	r3, [pc, #16]	; (8001358 <SysTick_Config+0x40>)
 8001348:	2207      	movs	r2, #7
 800134a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800134c:	2300      	movs	r3, #0
}
 800134e:	4618      	mov	r0, r3
 8001350:	3708      	adds	r7, #8
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	e000e010 	.word	0xe000e010

0800135c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001364:	6878      	ldr	r0, [r7, #4]
 8001366:	f7ff ff47 	bl	80011f8 <__NVIC_SetPriorityGrouping>
}
 800136a:	bf00      	nop
 800136c:	3708      	adds	r7, #8
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}

08001372 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001372:	b580      	push	{r7, lr}
 8001374:	b086      	sub	sp, #24
 8001376:	af00      	add	r7, sp, #0
 8001378:	4603      	mov	r3, r0
 800137a:	60b9      	str	r1, [r7, #8]
 800137c:	607a      	str	r2, [r7, #4]
 800137e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001380:	f7ff ff5e 	bl	8001240 <__NVIC_GetPriorityGrouping>
 8001384:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001386:	687a      	ldr	r2, [r7, #4]
 8001388:	68b9      	ldr	r1, [r7, #8]
 800138a:	6978      	ldr	r0, [r7, #20]
 800138c:	f7ff ff90 	bl	80012b0 <NVIC_EncodePriority>
 8001390:	4602      	mov	r2, r0
 8001392:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001396:	4611      	mov	r1, r2
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff ff5f 	bl	800125c <__NVIC_SetPriority>
}
 800139e:	bf00      	nop
 80013a0:	3718      	adds	r7, #24
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}

080013a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013a6:	b580      	push	{r7, lr}
 80013a8:	b082      	sub	sp, #8
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013ae:	6878      	ldr	r0, [r7, #4]
 80013b0:	f7ff ffb2 	bl	8001318 <SysTick_Config>
 80013b4:	4603      	mov	r3, r0
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3708      	adds	r7, #8
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
	...

080013c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b087      	sub	sp, #28
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
 80013c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80013ca:	2300      	movs	r3, #0
 80013cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80013ce:	e15a      	b.n	8001686 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	2101      	movs	r1, #1
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	fa01 f303 	lsl.w	r3, r1, r3
 80013dc:	4013      	ands	r3, r2
 80013de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	f000 814c 	beq.w	8001680 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	d00b      	beq.n	8001408 <HAL_GPIO_Init+0x48>
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	2b02      	cmp	r3, #2
 80013f6:	d007      	beq.n	8001408 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013fc:	2b11      	cmp	r3, #17
 80013fe:	d003      	beq.n	8001408 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	2b12      	cmp	r3, #18
 8001406:	d130      	bne.n	800146a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	689b      	ldr	r3, [r3, #8]
 800140c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	005b      	lsls	r3, r3, #1
 8001412:	2203      	movs	r2, #3
 8001414:	fa02 f303 	lsl.w	r3, r2, r3
 8001418:	43db      	mvns	r3, r3
 800141a:	693a      	ldr	r2, [r7, #16]
 800141c:	4013      	ands	r3, r2
 800141e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	68da      	ldr	r2, [r3, #12]
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	005b      	lsls	r3, r3, #1
 8001428:	fa02 f303 	lsl.w	r3, r2, r3
 800142c:	693a      	ldr	r2, [r7, #16]
 800142e:	4313      	orrs	r3, r2
 8001430:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	693a      	ldr	r2, [r7, #16]
 8001436:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800143e:	2201      	movs	r2, #1
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	fa02 f303 	lsl.w	r3, r2, r3
 8001446:	43db      	mvns	r3, r3
 8001448:	693a      	ldr	r2, [r7, #16]
 800144a:	4013      	ands	r3, r2
 800144c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	091b      	lsrs	r3, r3, #4
 8001454:	f003 0201 	and.w	r2, r3, #1
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	fa02 f303 	lsl.w	r3, r2, r3
 800145e:	693a      	ldr	r2, [r7, #16]
 8001460:	4313      	orrs	r3, r2
 8001462:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	693a      	ldr	r2, [r7, #16]
 8001468:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	68db      	ldr	r3, [r3, #12]
 800146e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	005b      	lsls	r3, r3, #1
 8001474:	2203      	movs	r2, #3
 8001476:	fa02 f303 	lsl.w	r3, r2, r3
 800147a:	43db      	mvns	r3, r3
 800147c:	693a      	ldr	r2, [r7, #16]
 800147e:	4013      	ands	r3, r2
 8001480:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	689a      	ldr	r2, [r3, #8]
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	005b      	lsls	r3, r3, #1
 800148a:	fa02 f303 	lsl.w	r3, r2, r3
 800148e:	693a      	ldr	r2, [r7, #16]
 8001490:	4313      	orrs	r3, r2
 8001492:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	693a      	ldr	r2, [r7, #16]
 8001498:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	2b02      	cmp	r3, #2
 80014a0:	d003      	beq.n	80014aa <HAL_GPIO_Init+0xea>
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	2b12      	cmp	r3, #18
 80014a8:	d123      	bne.n	80014f2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	08da      	lsrs	r2, r3, #3
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	3208      	adds	r2, #8
 80014b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	f003 0307 	and.w	r3, r3, #7
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	220f      	movs	r2, #15
 80014c2:	fa02 f303 	lsl.w	r3, r2, r3
 80014c6:	43db      	mvns	r3, r3
 80014c8:	693a      	ldr	r2, [r7, #16]
 80014ca:	4013      	ands	r3, r2
 80014cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	691a      	ldr	r2, [r3, #16]
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	f003 0307 	and.w	r3, r3, #7
 80014d8:	009b      	lsls	r3, r3, #2
 80014da:	fa02 f303 	lsl.w	r3, r2, r3
 80014de:	693a      	ldr	r2, [r7, #16]
 80014e0:	4313      	orrs	r3, r2
 80014e2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	08da      	lsrs	r2, r3, #3
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	3208      	adds	r2, #8
 80014ec:	6939      	ldr	r1, [r7, #16]
 80014ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	005b      	lsls	r3, r3, #1
 80014fc:	2203      	movs	r2, #3
 80014fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001502:	43db      	mvns	r3, r3
 8001504:	693a      	ldr	r2, [r7, #16]
 8001506:	4013      	ands	r3, r2
 8001508:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	f003 0203 	and.w	r2, r3, #3
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	005b      	lsls	r3, r3, #1
 8001516:	fa02 f303 	lsl.w	r3, r2, r3
 800151a:	693a      	ldr	r2, [r7, #16]
 800151c:	4313      	orrs	r3, r2
 800151e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	693a      	ldr	r2, [r7, #16]
 8001524:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800152e:	2b00      	cmp	r3, #0
 8001530:	f000 80a6 	beq.w	8001680 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001534:	4b5b      	ldr	r3, [pc, #364]	; (80016a4 <HAL_GPIO_Init+0x2e4>)
 8001536:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001538:	4a5a      	ldr	r2, [pc, #360]	; (80016a4 <HAL_GPIO_Init+0x2e4>)
 800153a:	f043 0301 	orr.w	r3, r3, #1
 800153e:	6613      	str	r3, [r2, #96]	; 0x60
 8001540:	4b58      	ldr	r3, [pc, #352]	; (80016a4 <HAL_GPIO_Init+0x2e4>)
 8001542:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001544:	f003 0301 	and.w	r3, r3, #1
 8001548:	60bb      	str	r3, [r7, #8]
 800154a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800154c:	4a56      	ldr	r2, [pc, #344]	; (80016a8 <HAL_GPIO_Init+0x2e8>)
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	089b      	lsrs	r3, r3, #2
 8001552:	3302      	adds	r3, #2
 8001554:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001558:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	f003 0303 	and.w	r3, r3, #3
 8001560:	009b      	lsls	r3, r3, #2
 8001562:	220f      	movs	r2, #15
 8001564:	fa02 f303 	lsl.w	r3, r2, r3
 8001568:	43db      	mvns	r3, r3
 800156a:	693a      	ldr	r2, [r7, #16]
 800156c:	4013      	ands	r3, r2
 800156e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001576:	d01f      	beq.n	80015b8 <HAL_GPIO_Init+0x1f8>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	4a4c      	ldr	r2, [pc, #304]	; (80016ac <HAL_GPIO_Init+0x2ec>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d019      	beq.n	80015b4 <HAL_GPIO_Init+0x1f4>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	4a4b      	ldr	r2, [pc, #300]	; (80016b0 <HAL_GPIO_Init+0x2f0>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d013      	beq.n	80015b0 <HAL_GPIO_Init+0x1f0>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	4a4a      	ldr	r2, [pc, #296]	; (80016b4 <HAL_GPIO_Init+0x2f4>)
 800158c:	4293      	cmp	r3, r2
 800158e:	d00d      	beq.n	80015ac <HAL_GPIO_Init+0x1ec>
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	4a49      	ldr	r2, [pc, #292]	; (80016b8 <HAL_GPIO_Init+0x2f8>)
 8001594:	4293      	cmp	r3, r2
 8001596:	d007      	beq.n	80015a8 <HAL_GPIO_Init+0x1e8>
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	4a48      	ldr	r2, [pc, #288]	; (80016bc <HAL_GPIO_Init+0x2fc>)
 800159c:	4293      	cmp	r3, r2
 800159e:	d101      	bne.n	80015a4 <HAL_GPIO_Init+0x1e4>
 80015a0:	2305      	movs	r3, #5
 80015a2:	e00a      	b.n	80015ba <HAL_GPIO_Init+0x1fa>
 80015a4:	2306      	movs	r3, #6
 80015a6:	e008      	b.n	80015ba <HAL_GPIO_Init+0x1fa>
 80015a8:	2304      	movs	r3, #4
 80015aa:	e006      	b.n	80015ba <HAL_GPIO_Init+0x1fa>
 80015ac:	2303      	movs	r3, #3
 80015ae:	e004      	b.n	80015ba <HAL_GPIO_Init+0x1fa>
 80015b0:	2302      	movs	r3, #2
 80015b2:	e002      	b.n	80015ba <HAL_GPIO_Init+0x1fa>
 80015b4:	2301      	movs	r3, #1
 80015b6:	e000      	b.n	80015ba <HAL_GPIO_Init+0x1fa>
 80015b8:	2300      	movs	r3, #0
 80015ba:	697a      	ldr	r2, [r7, #20]
 80015bc:	f002 0203 	and.w	r2, r2, #3
 80015c0:	0092      	lsls	r2, r2, #2
 80015c2:	4093      	lsls	r3, r2
 80015c4:	693a      	ldr	r2, [r7, #16]
 80015c6:	4313      	orrs	r3, r2
 80015c8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015ca:	4937      	ldr	r1, [pc, #220]	; (80016a8 <HAL_GPIO_Init+0x2e8>)
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	089b      	lsrs	r3, r3, #2
 80015d0:	3302      	adds	r3, #2
 80015d2:	693a      	ldr	r2, [r7, #16]
 80015d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80015d8:	4b39      	ldr	r3, [pc, #228]	; (80016c0 <HAL_GPIO_Init+0x300>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	43db      	mvns	r3, r3
 80015e2:	693a      	ldr	r2, [r7, #16]
 80015e4:	4013      	ands	r3, r2
 80015e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d003      	beq.n	80015fc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80015f4:	693a      	ldr	r2, [r7, #16]
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	4313      	orrs	r3, r2
 80015fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80015fc:	4a30      	ldr	r2, [pc, #192]	; (80016c0 <HAL_GPIO_Init+0x300>)
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001602:	4b2f      	ldr	r3, [pc, #188]	; (80016c0 <HAL_GPIO_Init+0x300>)
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	43db      	mvns	r3, r3
 800160c:	693a      	ldr	r2, [r7, #16]
 800160e:	4013      	ands	r3, r2
 8001610:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800161a:	2b00      	cmp	r3, #0
 800161c:	d003      	beq.n	8001626 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800161e:	693a      	ldr	r2, [r7, #16]
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	4313      	orrs	r3, r2
 8001624:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001626:	4a26      	ldr	r2, [pc, #152]	; (80016c0 <HAL_GPIO_Init+0x300>)
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800162c:	4b24      	ldr	r3, [pc, #144]	; (80016c0 <HAL_GPIO_Init+0x300>)
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	43db      	mvns	r3, r3
 8001636:	693a      	ldr	r2, [r7, #16]
 8001638:	4013      	ands	r3, r2
 800163a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001644:	2b00      	cmp	r3, #0
 8001646:	d003      	beq.n	8001650 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001648:	693a      	ldr	r2, [r7, #16]
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	4313      	orrs	r3, r2
 800164e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001650:	4a1b      	ldr	r2, [pc, #108]	; (80016c0 <HAL_GPIO_Init+0x300>)
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001656:	4b1a      	ldr	r3, [pc, #104]	; (80016c0 <HAL_GPIO_Init+0x300>)
 8001658:	68db      	ldr	r3, [r3, #12]
 800165a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	43db      	mvns	r3, r3
 8001660:	693a      	ldr	r2, [r7, #16]
 8001662:	4013      	ands	r3, r2
 8001664:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800166e:	2b00      	cmp	r3, #0
 8001670:	d003      	beq.n	800167a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001672:	693a      	ldr	r2, [r7, #16]
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	4313      	orrs	r3, r2
 8001678:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800167a:	4a11      	ldr	r2, [pc, #68]	; (80016c0 <HAL_GPIO_Init+0x300>)
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	3301      	adds	r3, #1
 8001684:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	fa22 f303 	lsr.w	r3, r2, r3
 8001690:	2b00      	cmp	r3, #0
 8001692:	f47f ae9d 	bne.w	80013d0 <HAL_GPIO_Init+0x10>
  }
}
 8001696:	bf00      	nop
 8001698:	371c      	adds	r7, #28
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	40021000 	.word	0x40021000
 80016a8:	40010000 	.word	0x40010000
 80016ac:	48000400 	.word	0x48000400
 80016b0:	48000800 	.word	0x48000800
 80016b4:	48000c00 	.word	0x48000c00
 80016b8:	48001000 	.word	0x48001000
 80016bc:	48001400 	.word	0x48001400
 80016c0:	40010400 	.word	0x40010400

080016c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
 80016cc:	460b      	mov	r3, r1
 80016ce:	807b      	strh	r3, [r7, #2]
 80016d0:	4613      	mov	r3, r2
 80016d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016d4:	787b      	ldrb	r3, [r7, #1]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d003      	beq.n	80016e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80016da:	887a      	ldrh	r2, [r7, #2]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80016e0:	e002      	b.n	80016e8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80016e2:	887a      	ldrh	r2, [r7, #2]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80016e8:	bf00      	nop
 80016ea:	370c      	adds	r7, #12
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr

080016f4 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
 80016fc:	460b      	mov	r3, r1
 80016fe:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	695a      	ldr	r2, [r3, #20]
 8001704:	887b      	ldrh	r3, [r7, #2]
 8001706:	4013      	ands	r3, r2
 8001708:	2b00      	cmp	r3, #0
 800170a:	d003      	beq.n	8001714 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800170c:	887a      	ldrh	r2, [r7, #2]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8001712:	e002      	b.n	800171a <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001714:	887a      	ldrh	r2, [r7, #2]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	619a      	str	r2, [r3, #24]
}
 800171a:	bf00      	nop
 800171c:	370c      	adds	r7, #12
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
	...

08001728 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001728:	b480      	push	{r7}
 800172a:	b085      	sub	sp, #20
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d141      	bne.n	80017ba <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001736:	4b4b      	ldr	r3, [pc, #300]	; (8001864 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800173e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001742:	d131      	bne.n	80017a8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001744:	4b47      	ldr	r3, [pc, #284]	; (8001864 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001746:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800174a:	4a46      	ldr	r2, [pc, #280]	; (8001864 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800174c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001750:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001754:	4b43      	ldr	r3, [pc, #268]	; (8001864 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800175c:	4a41      	ldr	r2, [pc, #260]	; (8001864 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800175e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001762:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001764:	4b40      	ldr	r3, [pc, #256]	; (8001868 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	2232      	movs	r2, #50	; 0x32
 800176a:	fb02 f303 	mul.w	r3, r2, r3
 800176e:	4a3f      	ldr	r2, [pc, #252]	; (800186c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001770:	fba2 2303 	umull	r2, r3, r2, r3
 8001774:	0c9b      	lsrs	r3, r3, #18
 8001776:	3301      	adds	r3, #1
 8001778:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800177a:	e002      	b.n	8001782 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	3b01      	subs	r3, #1
 8001780:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001782:	4b38      	ldr	r3, [pc, #224]	; (8001864 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001784:	695b      	ldr	r3, [r3, #20]
 8001786:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800178a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800178e:	d102      	bne.n	8001796 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d1f2      	bne.n	800177c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001796:	4b33      	ldr	r3, [pc, #204]	; (8001864 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001798:	695b      	ldr	r3, [r3, #20]
 800179a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800179e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017a2:	d158      	bne.n	8001856 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80017a4:	2303      	movs	r3, #3
 80017a6:	e057      	b.n	8001858 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80017a8:	4b2e      	ldr	r3, [pc, #184]	; (8001864 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80017ae:	4a2d      	ldr	r2, [pc, #180]	; (8001864 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80017b4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80017b8:	e04d      	b.n	8001856 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80017c0:	d141      	bne.n	8001846 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80017c2:	4b28      	ldr	r3, [pc, #160]	; (8001864 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80017ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017ce:	d131      	bne.n	8001834 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80017d0:	4b24      	ldr	r3, [pc, #144]	; (8001864 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80017d6:	4a23      	ldr	r2, [pc, #140]	; (8001864 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017dc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80017e0:	4b20      	ldr	r3, [pc, #128]	; (8001864 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80017e8:	4a1e      	ldr	r2, [pc, #120]	; (8001864 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017ee:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80017f0:	4b1d      	ldr	r3, [pc, #116]	; (8001868 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	2232      	movs	r2, #50	; 0x32
 80017f6:	fb02 f303 	mul.w	r3, r2, r3
 80017fa:	4a1c      	ldr	r2, [pc, #112]	; (800186c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80017fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001800:	0c9b      	lsrs	r3, r3, #18
 8001802:	3301      	adds	r3, #1
 8001804:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001806:	e002      	b.n	800180e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	3b01      	subs	r3, #1
 800180c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800180e:	4b15      	ldr	r3, [pc, #84]	; (8001864 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001810:	695b      	ldr	r3, [r3, #20]
 8001812:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001816:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800181a:	d102      	bne.n	8001822 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d1f2      	bne.n	8001808 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001822:	4b10      	ldr	r3, [pc, #64]	; (8001864 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001824:	695b      	ldr	r3, [r3, #20]
 8001826:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800182a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800182e:	d112      	bne.n	8001856 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001830:	2303      	movs	r3, #3
 8001832:	e011      	b.n	8001858 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001834:	4b0b      	ldr	r3, [pc, #44]	; (8001864 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001836:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800183a:	4a0a      	ldr	r2, [pc, #40]	; (8001864 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800183c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001840:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001844:	e007      	b.n	8001856 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001846:	4b07      	ldr	r3, [pc, #28]	; (8001864 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800184e:	4a05      	ldr	r2, [pc, #20]	; (8001864 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001850:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001854:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001856:	2300      	movs	r3, #0
}
 8001858:	4618      	mov	r0, r3
 800185a:	3714      	adds	r7, #20
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr
 8001864:	40007000 	.word	0x40007000
 8001868:	20000000 	.word	0x20000000
 800186c:	431bde83 	.word	0x431bde83

08001870 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b088      	sub	sp, #32
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d101      	bne.n	8001882 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e308      	b.n	8001e94 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 0301 	and.w	r3, r3, #1
 800188a:	2b00      	cmp	r3, #0
 800188c:	d075      	beq.n	800197a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800188e:	4ba3      	ldr	r3, [pc, #652]	; (8001b1c <HAL_RCC_OscConfig+0x2ac>)
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	f003 030c 	and.w	r3, r3, #12
 8001896:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001898:	4ba0      	ldr	r3, [pc, #640]	; (8001b1c <HAL_RCC_OscConfig+0x2ac>)
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	f003 0303 	and.w	r3, r3, #3
 80018a0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80018a2:	69bb      	ldr	r3, [r7, #24]
 80018a4:	2b0c      	cmp	r3, #12
 80018a6:	d102      	bne.n	80018ae <HAL_RCC_OscConfig+0x3e>
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	2b03      	cmp	r3, #3
 80018ac:	d002      	beq.n	80018b4 <HAL_RCC_OscConfig+0x44>
 80018ae:	69bb      	ldr	r3, [r7, #24]
 80018b0:	2b08      	cmp	r3, #8
 80018b2:	d10b      	bne.n	80018cc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018b4:	4b99      	ldr	r3, [pc, #612]	; (8001b1c <HAL_RCC_OscConfig+0x2ac>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d05b      	beq.n	8001978 <HAL_RCC_OscConfig+0x108>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d157      	bne.n	8001978 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80018c8:	2301      	movs	r3, #1
 80018ca:	e2e3      	b.n	8001e94 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018d4:	d106      	bne.n	80018e4 <HAL_RCC_OscConfig+0x74>
 80018d6:	4b91      	ldr	r3, [pc, #580]	; (8001b1c <HAL_RCC_OscConfig+0x2ac>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a90      	ldr	r2, [pc, #576]	; (8001b1c <HAL_RCC_OscConfig+0x2ac>)
 80018dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018e0:	6013      	str	r3, [r2, #0]
 80018e2:	e01d      	b.n	8001920 <HAL_RCC_OscConfig+0xb0>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018ec:	d10c      	bne.n	8001908 <HAL_RCC_OscConfig+0x98>
 80018ee:	4b8b      	ldr	r3, [pc, #556]	; (8001b1c <HAL_RCC_OscConfig+0x2ac>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a8a      	ldr	r2, [pc, #552]	; (8001b1c <HAL_RCC_OscConfig+0x2ac>)
 80018f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018f8:	6013      	str	r3, [r2, #0]
 80018fa:	4b88      	ldr	r3, [pc, #544]	; (8001b1c <HAL_RCC_OscConfig+0x2ac>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a87      	ldr	r2, [pc, #540]	; (8001b1c <HAL_RCC_OscConfig+0x2ac>)
 8001900:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001904:	6013      	str	r3, [r2, #0]
 8001906:	e00b      	b.n	8001920 <HAL_RCC_OscConfig+0xb0>
 8001908:	4b84      	ldr	r3, [pc, #528]	; (8001b1c <HAL_RCC_OscConfig+0x2ac>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a83      	ldr	r2, [pc, #524]	; (8001b1c <HAL_RCC_OscConfig+0x2ac>)
 800190e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001912:	6013      	str	r3, [r2, #0]
 8001914:	4b81      	ldr	r3, [pc, #516]	; (8001b1c <HAL_RCC_OscConfig+0x2ac>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a80      	ldr	r2, [pc, #512]	; (8001b1c <HAL_RCC_OscConfig+0x2ac>)
 800191a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800191e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d013      	beq.n	8001950 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001928:	f7ff fb20 	bl	8000f6c <HAL_GetTick>
 800192c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800192e:	e008      	b.n	8001942 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001930:	f7ff fb1c 	bl	8000f6c <HAL_GetTick>
 8001934:	4602      	mov	r2, r0
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	2b64      	cmp	r3, #100	; 0x64
 800193c:	d901      	bls.n	8001942 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800193e:	2303      	movs	r3, #3
 8001940:	e2a8      	b.n	8001e94 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001942:	4b76      	ldr	r3, [pc, #472]	; (8001b1c <HAL_RCC_OscConfig+0x2ac>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800194a:	2b00      	cmp	r3, #0
 800194c:	d0f0      	beq.n	8001930 <HAL_RCC_OscConfig+0xc0>
 800194e:	e014      	b.n	800197a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001950:	f7ff fb0c 	bl	8000f6c <HAL_GetTick>
 8001954:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001956:	e008      	b.n	800196a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001958:	f7ff fb08 	bl	8000f6c <HAL_GetTick>
 800195c:	4602      	mov	r2, r0
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	2b64      	cmp	r3, #100	; 0x64
 8001964:	d901      	bls.n	800196a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001966:	2303      	movs	r3, #3
 8001968:	e294      	b.n	8001e94 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800196a:	4b6c      	ldr	r3, [pc, #432]	; (8001b1c <HAL_RCC_OscConfig+0x2ac>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001972:	2b00      	cmp	r3, #0
 8001974:	d1f0      	bne.n	8001958 <HAL_RCC_OscConfig+0xe8>
 8001976:	e000      	b.n	800197a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001978:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 0302 	and.w	r3, r3, #2
 8001982:	2b00      	cmp	r3, #0
 8001984:	d075      	beq.n	8001a72 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001986:	4b65      	ldr	r3, [pc, #404]	; (8001b1c <HAL_RCC_OscConfig+0x2ac>)
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	f003 030c 	and.w	r3, r3, #12
 800198e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001990:	4b62      	ldr	r3, [pc, #392]	; (8001b1c <HAL_RCC_OscConfig+0x2ac>)
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	f003 0303 	and.w	r3, r3, #3
 8001998:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800199a:	69bb      	ldr	r3, [r7, #24]
 800199c:	2b0c      	cmp	r3, #12
 800199e:	d102      	bne.n	80019a6 <HAL_RCC_OscConfig+0x136>
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	d002      	beq.n	80019ac <HAL_RCC_OscConfig+0x13c>
 80019a6:	69bb      	ldr	r3, [r7, #24]
 80019a8:	2b04      	cmp	r3, #4
 80019aa:	d11f      	bne.n	80019ec <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019ac:	4b5b      	ldr	r3, [pc, #364]	; (8001b1c <HAL_RCC_OscConfig+0x2ac>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d005      	beq.n	80019c4 <HAL_RCC_OscConfig+0x154>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d101      	bne.n	80019c4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	e267      	b.n	8001e94 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019c4:	4b55      	ldr	r3, [pc, #340]	; (8001b1c <HAL_RCC_OscConfig+0x2ac>)
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	691b      	ldr	r3, [r3, #16]
 80019d0:	061b      	lsls	r3, r3, #24
 80019d2:	4952      	ldr	r1, [pc, #328]	; (8001b1c <HAL_RCC_OscConfig+0x2ac>)
 80019d4:	4313      	orrs	r3, r2
 80019d6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80019d8:	4b51      	ldr	r3, [pc, #324]	; (8001b20 <HAL_RCC_OscConfig+0x2b0>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4618      	mov	r0, r3
 80019de:	f7ff fa79 	bl	8000ed4 <HAL_InitTick>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d043      	beq.n	8001a70 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	e253      	b.n	8001e94 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d023      	beq.n	8001a3c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019f4:	4b49      	ldr	r3, [pc, #292]	; (8001b1c <HAL_RCC_OscConfig+0x2ac>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a48      	ldr	r2, [pc, #288]	; (8001b1c <HAL_RCC_OscConfig+0x2ac>)
 80019fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a00:	f7ff fab4 	bl	8000f6c <HAL_GetTick>
 8001a04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a06:	e008      	b.n	8001a1a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a08:	f7ff fab0 	bl	8000f6c <HAL_GetTick>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	2b02      	cmp	r3, #2
 8001a14:	d901      	bls.n	8001a1a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001a16:	2303      	movs	r3, #3
 8001a18:	e23c      	b.n	8001e94 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a1a:	4b40      	ldr	r3, [pc, #256]	; (8001b1c <HAL_RCC_OscConfig+0x2ac>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d0f0      	beq.n	8001a08 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a26:	4b3d      	ldr	r3, [pc, #244]	; (8001b1c <HAL_RCC_OscConfig+0x2ac>)
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	691b      	ldr	r3, [r3, #16]
 8001a32:	061b      	lsls	r3, r3, #24
 8001a34:	4939      	ldr	r1, [pc, #228]	; (8001b1c <HAL_RCC_OscConfig+0x2ac>)
 8001a36:	4313      	orrs	r3, r2
 8001a38:	604b      	str	r3, [r1, #4]
 8001a3a:	e01a      	b.n	8001a72 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a3c:	4b37      	ldr	r3, [pc, #220]	; (8001b1c <HAL_RCC_OscConfig+0x2ac>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a36      	ldr	r2, [pc, #216]	; (8001b1c <HAL_RCC_OscConfig+0x2ac>)
 8001a42:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a48:	f7ff fa90 	bl	8000f6c <HAL_GetTick>
 8001a4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a4e:	e008      	b.n	8001a62 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a50:	f7ff fa8c 	bl	8000f6c <HAL_GetTick>
 8001a54:	4602      	mov	r2, r0
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d901      	bls.n	8001a62 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	e218      	b.n	8001e94 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a62:	4b2e      	ldr	r3, [pc, #184]	; (8001b1c <HAL_RCC_OscConfig+0x2ac>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d1f0      	bne.n	8001a50 <HAL_RCC_OscConfig+0x1e0>
 8001a6e:	e000      	b.n	8001a72 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a70:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 0308 	and.w	r3, r3, #8
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d03c      	beq.n	8001af8 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	695b      	ldr	r3, [r3, #20]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d01c      	beq.n	8001ac0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a86:	4b25      	ldr	r3, [pc, #148]	; (8001b1c <HAL_RCC_OscConfig+0x2ac>)
 8001a88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a8c:	4a23      	ldr	r2, [pc, #140]	; (8001b1c <HAL_RCC_OscConfig+0x2ac>)
 8001a8e:	f043 0301 	orr.w	r3, r3, #1
 8001a92:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a96:	f7ff fa69 	bl	8000f6c <HAL_GetTick>
 8001a9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a9c:	e008      	b.n	8001ab0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a9e:	f7ff fa65 	bl	8000f6c <HAL_GetTick>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	1ad3      	subs	r3, r2, r3
 8001aa8:	2b02      	cmp	r3, #2
 8001aaa:	d901      	bls.n	8001ab0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001aac:	2303      	movs	r3, #3
 8001aae:	e1f1      	b.n	8001e94 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ab0:	4b1a      	ldr	r3, [pc, #104]	; (8001b1c <HAL_RCC_OscConfig+0x2ac>)
 8001ab2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ab6:	f003 0302 	and.w	r3, r3, #2
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d0ef      	beq.n	8001a9e <HAL_RCC_OscConfig+0x22e>
 8001abe:	e01b      	b.n	8001af8 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ac0:	4b16      	ldr	r3, [pc, #88]	; (8001b1c <HAL_RCC_OscConfig+0x2ac>)
 8001ac2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ac6:	4a15      	ldr	r2, [pc, #84]	; (8001b1c <HAL_RCC_OscConfig+0x2ac>)
 8001ac8:	f023 0301 	bic.w	r3, r3, #1
 8001acc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ad0:	f7ff fa4c 	bl	8000f6c <HAL_GetTick>
 8001ad4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ad6:	e008      	b.n	8001aea <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ad8:	f7ff fa48 	bl	8000f6c <HAL_GetTick>
 8001adc:	4602      	mov	r2, r0
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	2b02      	cmp	r3, #2
 8001ae4:	d901      	bls.n	8001aea <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	e1d4      	b.n	8001e94 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001aea:	4b0c      	ldr	r3, [pc, #48]	; (8001b1c <HAL_RCC_OscConfig+0x2ac>)
 8001aec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001af0:	f003 0302 	and.w	r3, r3, #2
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d1ef      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f003 0304 	and.w	r3, r3, #4
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	f000 80ab 	beq.w	8001c5c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b06:	2300      	movs	r3, #0
 8001b08:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001b0a:	4b04      	ldr	r3, [pc, #16]	; (8001b1c <HAL_RCC_OscConfig+0x2ac>)
 8001b0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d106      	bne.n	8001b24 <HAL_RCC_OscConfig+0x2b4>
 8001b16:	2301      	movs	r3, #1
 8001b18:	e005      	b.n	8001b26 <HAL_RCC_OscConfig+0x2b6>
 8001b1a:	bf00      	nop
 8001b1c:	40021000 	.word	0x40021000
 8001b20:	20000004 	.word	0x20000004
 8001b24:	2300      	movs	r3, #0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d00d      	beq.n	8001b46 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b2a:	4baf      	ldr	r3, [pc, #700]	; (8001de8 <HAL_RCC_OscConfig+0x578>)
 8001b2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b2e:	4aae      	ldr	r2, [pc, #696]	; (8001de8 <HAL_RCC_OscConfig+0x578>)
 8001b30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b34:	6593      	str	r3, [r2, #88]	; 0x58
 8001b36:	4bac      	ldr	r3, [pc, #688]	; (8001de8 <HAL_RCC_OscConfig+0x578>)
 8001b38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b3e:	60fb      	str	r3, [r7, #12]
 8001b40:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001b42:	2301      	movs	r3, #1
 8001b44:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b46:	4ba9      	ldr	r3, [pc, #676]	; (8001dec <HAL_RCC_OscConfig+0x57c>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d118      	bne.n	8001b84 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b52:	4ba6      	ldr	r3, [pc, #664]	; (8001dec <HAL_RCC_OscConfig+0x57c>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4aa5      	ldr	r2, [pc, #660]	; (8001dec <HAL_RCC_OscConfig+0x57c>)
 8001b58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b5e:	f7ff fa05 	bl	8000f6c <HAL_GetTick>
 8001b62:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b64:	e008      	b.n	8001b78 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b66:	f7ff fa01 	bl	8000f6c <HAL_GetTick>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	1ad3      	subs	r3, r2, r3
 8001b70:	2b02      	cmp	r3, #2
 8001b72:	d901      	bls.n	8001b78 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001b74:	2303      	movs	r3, #3
 8001b76:	e18d      	b.n	8001e94 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b78:	4b9c      	ldr	r3, [pc, #624]	; (8001dec <HAL_RCC_OscConfig+0x57c>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d0f0      	beq.n	8001b66 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	d108      	bne.n	8001b9e <HAL_RCC_OscConfig+0x32e>
 8001b8c:	4b96      	ldr	r3, [pc, #600]	; (8001de8 <HAL_RCC_OscConfig+0x578>)
 8001b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b92:	4a95      	ldr	r2, [pc, #596]	; (8001de8 <HAL_RCC_OscConfig+0x578>)
 8001b94:	f043 0301 	orr.w	r3, r3, #1
 8001b98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b9c:	e024      	b.n	8001be8 <HAL_RCC_OscConfig+0x378>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	2b05      	cmp	r3, #5
 8001ba4:	d110      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x358>
 8001ba6:	4b90      	ldr	r3, [pc, #576]	; (8001de8 <HAL_RCC_OscConfig+0x578>)
 8001ba8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bac:	4a8e      	ldr	r2, [pc, #568]	; (8001de8 <HAL_RCC_OscConfig+0x578>)
 8001bae:	f043 0304 	orr.w	r3, r3, #4
 8001bb2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001bb6:	4b8c      	ldr	r3, [pc, #560]	; (8001de8 <HAL_RCC_OscConfig+0x578>)
 8001bb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bbc:	4a8a      	ldr	r2, [pc, #552]	; (8001de8 <HAL_RCC_OscConfig+0x578>)
 8001bbe:	f043 0301 	orr.w	r3, r3, #1
 8001bc2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001bc6:	e00f      	b.n	8001be8 <HAL_RCC_OscConfig+0x378>
 8001bc8:	4b87      	ldr	r3, [pc, #540]	; (8001de8 <HAL_RCC_OscConfig+0x578>)
 8001bca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bce:	4a86      	ldr	r2, [pc, #536]	; (8001de8 <HAL_RCC_OscConfig+0x578>)
 8001bd0:	f023 0301 	bic.w	r3, r3, #1
 8001bd4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001bd8:	4b83      	ldr	r3, [pc, #524]	; (8001de8 <HAL_RCC_OscConfig+0x578>)
 8001bda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bde:	4a82      	ldr	r2, [pc, #520]	; (8001de8 <HAL_RCC_OscConfig+0x578>)
 8001be0:	f023 0304 	bic.w	r3, r3, #4
 8001be4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d016      	beq.n	8001c1e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bf0:	f7ff f9bc 	bl	8000f6c <HAL_GetTick>
 8001bf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bf6:	e00a      	b.n	8001c0e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bf8:	f7ff f9b8 	bl	8000f6c <HAL_GetTick>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d901      	bls.n	8001c0e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e142      	b.n	8001e94 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c0e:	4b76      	ldr	r3, [pc, #472]	; (8001de8 <HAL_RCC_OscConfig+0x578>)
 8001c10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c14:	f003 0302 	and.w	r3, r3, #2
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d0ed      	beq.n	8001bf8 <HAL_RCC_OscConfig+0x388>
 8001c1c:	e015      	b.n	8001c4a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c1e:	f7ff f9a5 	bl	8000f6c <HAL_GetTick>
 8001c22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c24:	e00a      	b.n	8001c3c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c26:	f7ff f9a1 	bl	8000f6c <HAL_GetTick>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	1ad3      	subs	r3, r2, r3
 8001c30:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d901      	bls.n	8001c3c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001c38:	2303      	movs	r3, #3
 8001c3a:	e12b      	b.n	8001e94 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c3c:	4b6a      	ldr	r3, [pc, #424]	; (8001de8 <HAL_RCC_OscConfig+0x578>)
 8001c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c42:	f003 0302 	and.w	r3, r3, #2
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d1ed      	bne.n	8001c26 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001c4a:	7ffb      	ldrb	r3, [r7, #31]
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d105      	bne.n	8001c5c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c50:	4b65      	ldr	r3, [pc, #404]	; (8001de8 <HAL_RCC_OscConfig+0x578>)
 8001c52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c54:	4a64      	ldr	r2, [pc, #400]	; (8001de8 <HAL_RCC_OscConfig+0x578>)
 8001c56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c5a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 0320 	and.w	r3, r3, #32
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d03c      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	699b      	ldr	r3, [r3, #24]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d01c      	beq.n	8001caa <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001c70:	4b5d      	ldr	r3, [pc, #372]	; (8001de8 <HAL_RCC_OscConfig+0x578>)
 8001c72:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c76:	4a5c      	ldr	r2, [pc, #368]	; (8001de8 <HAL_RCC_OscConfig+0x578>)
 8001c78:	f043 0301 	orr.w	r3, r3, #1
 8001c7c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c80:	f7ff f974 	bl	8000f6c <HAL_GetTick>
 8001c84:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001c86:	e008      	b.n	8001c9a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c88:	f7ff f970 	bl	8000f6c <HAL_GetTick>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	d901      	bls.n	8001c9a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001c96:	2303      	movs	r3, #3
 8001c98:	e0fc      	b.n	8001e94 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001c9a:	4b53      	ldr	r3, [pc, #332]	; (8001de8 <HAL_RCC_OscConfig+0x578>)
 8001c9c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ca0:	f003 0302 	and.w	r3, r3, #2
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d0ef      	beq.n	8001c88 <HAL_RCC_OscConfig+0x418>
 8001ca8:	e01b      	b.n	8001ce2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001caa:	4b4f      	ldr	r3, [pc, #316]	; (8001de8 <HAL_RCC_OscConfig+0x578>)
 8001cac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001cb0:	4a4d      	ldr	r2, [pc, #308]	; (8001de8 <HAL_RCC_OscConfig+0x578>)
 8001cb2:	f023 0301 	bic.w	r3, r3, #1
 8001cb6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cba:	f7ff f957 	bl	8000f6c <HAL_GetTick>
 8001cbe:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001cc0:	e008      	b.n	8001cd4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001cc2:	f7ff f953 	bl	8000f6c <HAL_GetTick>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	2b02      	cmp	r3, #2
 8001cce:	d901      	bls.n	8001cd4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	e0df      	b.n	8001e94 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001cd4:	4b44      	ldr	r3, [pc, #272]	; (8001de8 <HAL_RCC_OscConfig+0x578>)
 8001cd6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001cda:	f003 0302 	and.w	r3, r3, #2
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d1ef      	bne.n	8001cc2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	69db      	ldr	r3, [r3, #28]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	f000 80d3 	beq.w	8001e92 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001cec:	4b3e      	ldr	r3, [pc, #248]	; (8001de8 <HAL_RCC_OscConfig+0x578>)
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	f003 030c 	and.w	r3, r3, #12
 8001cf4:	2b0c      	cmp	r3, #12
 8001cf6:	f000 808d 	beq.w	8001e14 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	69db      	ldr	r3, [r3, #28]
 8001cfe:	2b02      	cmp	r3, #2
 8001d00:	d15a      	bne.n	8001db8 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d02:	4b39      	ldr	r3, [pc, #228]	; (8001de8 <HAL_RCC_OscConfig+0x578>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a38      	ldr	r2, [pc, #224]	; (8001de8 <HAL_RCC_OscConfig+0x578>)
 8001d08:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d0e:	f7ff f92d 	bl	8000f6c <HAL_GetTick>
 8001d12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d14:	e008      	b.n	8001d28 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d16:	f7ff f929 	bl	8000f6c <HAL_GetTick>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	1ad3      	subs	r3, r2, r3
 8001d20:	2b02      	cmp	r3, #2
 8001d22:	d901      	bls.n	8001d28 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8001d24:	2303      	movs	r3, #3
 8001d26:	e0b5      	b.n	8001e94 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d28:	4b2f      	ldr	r3, [pc, #188]	; (8001de8 <HAL_RCC_OscConfig+0x578>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d1f0      	bne.n	8001d16 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d34:	4b2c      	ldr	r3, [pc, #176]	; (8001de8 <HAL_RCC_OscConfig+0x578>)
 8001d36:	68da      	ldr	r2, [r3, #12]
 8001d38:	4b2d      	ldr	r3, [pc, #180]	; (8001df0 <HAL_RCC_OscConfig+0x580>)
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	687a      	ldr	r2, [r7, #4]
 8001d3e:	6a11      	ldr	r1, [r2, #32]
 8001d40:	687a      	ldr	r2, [r7, #4]
 8001d42:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001d44:	3a01      	subs	r2, #1
 8001d46:	0112      	lsls	r2, r2, #4
 8001d48:	4311      	orrs	r1, r2
 8001d4a:	687a      	ldr	r2, [r7, #4]
 8001d4c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001d4e:	0212      	lsls	r2, r2, #8
 8001d50:	4311      	orrs	r1, r2
 8001d52:	687a      	ldr	r2, [r7, #4]
 8001d54:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001d56:	0852      	lsrs	r2, r2, #1
 8001d58:	3a01      	subs	r2, #1
 8001d5a:	0552      	lsls	r2, r2, #21
 8001d5c:	4311      	orrs	r1, r2
 8001d5e:	687a      	ldr	r2, [r7, #4]
 8001d60:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001d62:	0852      	lsrs	r2, r2, #1
 8001d64:	3a01      	subs	r2, #1
 8001d66:	0652      	lsls	r2, r2, #25
 8001d68:	4311      	orrs	r1, r2
 8001d6a:	687a      	ldr	r2, [r7, #4]
 8001d6c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001d6e:	06d2      	lsls	r2, r2, #27
 8001d70:	430a      	orrs	r2, r1
 8001d72:	491d      	ldr	r1, [pc, #116]	; (8001de8 <HAL_RCC_OscConfig+0x578>)
 8001d74:	4313      	orrs	r3, r2
 8001d76:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d78:	4b1b      	ldr	r3, [pc, #108]	; (8001de8 <HAL_RCC_OscConfig+0x578>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a1a      	ldr	r2, [pc, #104]	; (8001de8 <HAL_RCC_OscConfig+0x578>)
 8001d7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d82:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d84:	4b18      	ldr	r3, [pc, #96]	; (8001de8 <HAL_RCC_OscConfig+0x578>)
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	4a17      	ldr	r2, [pc, #92]	; (8001de8 <HAL_RCC_OscConfig+0x578>)
 8001d8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d8e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d90:	f7ff f8ec 	bl	8000f6c <HAL_GetTick>
 8001d94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d96:	e008      	b.n	8001daa <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d98:	f7ff f8e8 	bl	8000f6c <HAL_GetTick>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d901      	bls.n	8001daa <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8001da6:	2303      	movs	r3, #3
 8001da8:	e074      	b.n	8001e94 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001daa:	4b0f      	ldr	r3, [pc, #60]	; (8001de8 <HAL_RCC_OscConfig+0x578>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d0f0      	beq.n	8001d98 <HAL_RCC_OscConfig+0x528>
 8001db6:	e06c      	b.n	8001e92 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001db8:	4b0b      	ldr	r3, [pc, #44]	; (8001de8 <HAL_RCC_OscConfig+0x578>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a0a      	ldr	r2, [pc, #40]	; (8001de8 <HAL_RCC_OscConfig+0x578>)
 8001dbe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001dc2:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001dc4:	4b08      	ldr	r3, [pc, #32]	; (8001de8 <HAL_RCC_OscConfig+0x578>)
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	4a07      	ldr	r2, [pc, #28]	; (8001de8 <HAL_RCC_OscConfig+0x578>)
 8001dca:	f023 0303 	bic.w	r3, r3, #3
 8001dce:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001dd0:	4b05      	ldr	r3, [pc, #20]	; (8001de8 <HAL_RCC_OscConfig+0x578>)
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	4a04      	ldr	r2, [pc, #16]	; (8001de8 <HAL_RCC_OscConfig+0x578>)
 8001dd6:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001dda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dde:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001de0:	f7ff f8c4 	bl	8000f6c <HAL_GetTick>
 8001de4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001de6:	e00e      	b.n	8001e06 <HAL_RCC_OscConfig+0x596>
 8001de8:	40021000 	.word	0x40021000
 8001dec:	40007000 	.word	0x40007000
 8001df0:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001df4:	f7ff f8ba 	bl	8000f6c <HAL_GetTick>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	2b02      	cmp	r3, #2
 8001e00:	d901      	bls.n	8001e06 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8001e02:	2303      	movs	r3, #3
 8001e04:	e046      	b.n	8001e94 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e06:	4b25      	ldr	r3, [pc, #148]	; (8001e9c <HAL_RCC_OscConfig+0x62c>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d1f0      	bne.n	8001df4 <HAL_RCC_OscConfig+0x584>
 8001e12:	e03e      	b.n	8001e92 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	69db      	ldr	r3, [r3, #28]
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d101      	bne.n	8001e20 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e039      	b.n	8001e94 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001e20:	4b1e      	ldr	r3, [pc, #120]	; (8001e9c <HAL_RCC_OscConfig+0x62c>)
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	f003 0203 	and.w	r2, r3, #3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6a1b      	ldr	r3, [r3, #32]
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d12c      	bne.n	8001e8e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e3e:	3b01      	subs	r3, #1
 8001e40:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e42:	429a      	cmp	r2, r3
 8001e44:	d123      	bne.n	8001e8e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e50:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e52:	429a      	cmp	r2, r3
 8001e54:	d11b      	bne.n	8001e8e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e60:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e62:	429a      	cmp	r2, r3
 8001e64:	d113      	bne.n	8001e8e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e70:	085b      	lsrs	r3, r3, #1
 8001e72:	3b01      	subs	r3, #1
 8001e74:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001e76:	429a      	cmp	r2, r3
 8001e78:	d109      	bne.n	8001e8e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e84:	085b      	lsrs	r3, r3, #1
 8001e86:	3b01      	subs	r3, #1
 8001e88:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	d001      	beq.n	8001e92 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e000      	b.n	8001e94 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8001e92:	2300      	movs	r3, #0
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	3720      	adds	r7, #32
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	40021000 	.word	0x40021000

08001ea0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b086      	sub	sp, #24
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
 8001ea8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d101      	bne.n	8001eb8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e11e      	b.n	80020f6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001eb8:	4b91      	ldr	r3, [pc, #580]	; (8002100 <HAL_RCC_ClockConfig+0x260>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 030f 	and.w	r3, r3, #15
 8001ec0:	683a      	ldr	r2, [r7, #0]
 8001ec2:	429a      	cmp	r2, r3
 8001ec4:	d910      	bls.n	8001ee8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ec6:	4b8e      	ldr	r3, [pc, #568]	; (8002100 <HAL_RCC_ClockConfig+0x260>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f023 020f 	bic.w	r2, r3, #15
 8001ece:	498c      	ldr	r1, [pc, #560]	; (8002100 <HAL_RCC_ClockConfig+0x260>)
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ed6:	4b8a      	ldr	r3, [pc, #552]	; (8002100 <HAL_RCC_ClockConfig+0x260>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 030f 	and.w	r3, r3, #15
 8001ede:	683a      	ldr	r2, [r7, #0]
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d001      	beq.n	8001ee8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e106      	b.n	80020f6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 0301 	and.w	r3, r3, #1
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d073      	beq.n	8001fdc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	2b03      	cmp	r3, #3
 8001efa:	d129      	bne.n	8001f50 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001efc:	4b81      	ldr	r3, [pc, #516]	; (8002104 <HAL_RCC_ClockConfig+0x264>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d101      	bne.n	8001f0c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e0f4      	b.n	80020f6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001f0c:	f000 f966 	bl	80021dc <RCC_GetSysClockFreqFromPLLSource>
 8001f10:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	4a7c      	ldr	r2, [pc, #496]	; (8002108 <HAL_RCC_ClockConfig+0x268>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d93f      	bls.n	8001f9a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001f1a:	4b7a      	ldr	r3, [pc, #488]	; (8002104 <HAL_RCC_ClockConfig+0x264>)
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d009      	beq.n	8001f3a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d033      	beq.n	8001f9a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d12f      	bne.n	8001f9a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001f3a:	4b72      	ldr	r3, [pc, #456]	; (8002104 <HAL_RCC_ClockConfig+0x264>)
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001f42:	4a70      	ldr	r2, [pc, #448]	; (8002104 <HAL_RCC_ClockConfig+0x264>)
 8001f44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f48:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001f4a:	2380      	movs	r3, #128	; 0x80
 8001f4c:	617b      	str	r3, [r7, #20]
 8001f4e:	e024      	b.n	8001f9a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	2b02      	cmp	r3, #2
 8001f56:	d107      	bne.n	8001f68 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f58:	4b6a      	ldr	r3, [pc, #424]	; (8002104 <HAL_RCC_ClockConfig+0x264>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d109      	bne.n	8001f78 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	e0c6      	b.n	80020f6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f68:	4b66      	ldr	r3, [pc, #408]	; (8002104 <HAL_RCC_ClockConfig+0x264>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d101      	bne.n	8001f78 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	e0be      	b.n	80020f6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001f78:	f000 f8ce 	bl	8002118 <HAL_RCC_GetSysClockFreq>
 8001f7c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	4a61      	ldr	r2, [pc, #388]	; (8002108 <HAL_RCC_ClockConfig+0x268>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d909      	bls.n	8001f9a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001f86:	4b5f      	ldr	r3, [pc, #380]	; (8002104 <HAL_RCC_ClockConfig+0x264>)
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001f8e:	4a5d      	ldr	r2, [pc, #372]	; (8002104 <HAL_RCC_ClockConfig+0x264>)
 8001f90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f94:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001f96:	2380      	movs	r3, #128	; 0x80
 8001f98:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f9a:	4b5a      	ldr	r3, [pc, #360]	; (8002104 <HAL_RCC_ClockConfig+0x264>)
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	f023 0203 	bic.w	r2, r3, #3
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	4957      	ldr	r1, [pc, #348]	; (8002104 <HAL_RCC_ClockConfig+0x264>)
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001fac:	f7fe ffde 	bl	8000f6c <HAL_GetTick>
 8001fb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fb2:	e00a      	b.n	8001fca <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fb4:	f7fe ffda 	bl	8000f6c <HAL_GetTick>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d901      	bls.n	8001fca <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	e095      	b.n	80020f6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fca:	4b4e      	ldr	r3, [pc, #312]	; (8002104 <HAL_RCC_ClockConfig+0x264>)
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	f003 020c 	and.w	r2, r3, #12
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d1eb      	bne.n	8001fb4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 0302 	and.w	r3, r3, #2
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d023      	beq.n	8002030 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 0304 	and.w	r3, r3, #4
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d005      	beq.n	8002000 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ff4:	4b43      	ldr	r3, [pc, #268]	; (8002104 <HAL_RCC_ClockConfig+0x264>)
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	4a42      	ldr	r2, [pc, #264]	; (8002104 <HAL_RCC_ClockConfig+0x264>)
 8001ffa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001ffe:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f003 0308 	and.w	r3, r3, #8
 8002008:	2b00      	cmp	r3, #0
 800200a:	d007      	beq.n	800201c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800200c:	4b3d      	ldr	r3, [pc, #244]	; (8002104 <HAL_RCC_ClockConfig+0x264>)
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002014:	4a3b      	ldr	r2, [pc, #236]	; (8002104 <HAL_RCC_ClockConfig+0x264>)
 8002016:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800201a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800201c:	4b39      	ldr	r3, [pc, #228]	; (8002104 <HAL_RCC_ClockConfig+0x264>)
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	4936      	ldr	r1, [pc, #216]	; (8002104 <HAL_RCC_ClockConfig+0x264>)
 800202a:	4313      	orrs	r3, r2
 800202c:	608b      	str	r3, [r1, #8]
 800202e:	e008      	b.n	8002042 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	2b80      	cmp	r3, #128	; 0x80
 8002034:	d105      	bne.n	8002042 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002036:	4b33      	ldr	r3, [pc, #204]	; (8002104 <HAL_RCC_ClockConfig+0x264>)
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	4a32      	ldr	r2, [pc, #200]	; (8002104 <HAL_RCC_ClockConfig+0x264>)
 800203c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002040:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002042:	4b2f      	ldr	r3, [pc, #188]	; (8002100 <HAL_RCC_ClockConfig+0x260>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 030f 	and.w	r3, r3, #15
 800204a:	683a      	ldr	r2, [r7, #0]
 800204c:	429a      	cmp	r2, r3
 800204e:	d21d      	bcs.n	800208c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002050:	4b2b      	ldr	r3, [pc, #172]	; (8002100 <HAL_RCC_ClockConfig+0x260>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f023 020f 	bic.w	r2, r3, #15
 8002058:	4929      	ldr	r1, [pc, #164]	; (8002100 <HAL_RCC_ClockConfig+0x260>)
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	4313      	orrs	r3, r2
 800205e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002060:	f7fe ff84 	bl	8000f6c <HAL_GetTick>
 8002064:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002066:	e00a      	b.n	800207e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002068:	f7fe ff80 	bl	8000f6c <HAL_GetTick>
 800206c:	4602      	mov	r2, r0
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	f241 3288 	movw	r2, #5000	; 0x1388
 8002076:	4293      	cmp	r3, r2
 8002078:	d901      	bls.n	800207e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800207a:	2303      	movs	r3, #3
 800207c:	e03b      	b.n	80020f6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800207e:	4b20      	ldr	r3, [pc, #128]	; (8002100 <HAL_RCC_ClockConfig+0x260>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 030f 	and.w	r3, r3, #15
 8002086:	683a      	ldr	r2, [r7, #0]
 8002088:	429a      	cmp	r2, r3
 800208a:	d1ed      	bne.n	8002068 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 0304 	and.w	r3, r3, #4
 8002094:	2b00      	cmp	r3, #0
 8002096:	d008      	beq.n	80020aa <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002098:	4b1a      	ldr	r3, [pc, #104]	; (8002104 <HAL_RCC_ClockConfig+0x264>)
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	4917      	ldr	r1, [pc, #92]	; (8002104 <HAL_RCC_ClockConfig+0x264>)
 80020a6:	4313      	orrs	r3, r2
 80020a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0308 	and.w	r3, r3, #8
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d009      	beq.n	80020ca <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020b6:	4b13      	ldr	r3, [pc, #76]	; (8002104 <HAL_RCC_ClockConfig+0x264>)
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	691b      	ldr	r3, [r3, #16]
 80020c2:	00db      	lsls	r3, r3, #3
 80020c4:	490f      	ldr	r1, [pc, #60]	; (8002104 <HAL_RCC_ClockConfig+0x264>)
 80020c6:	4313      	orrs	r3, r2
 80020c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80020ca:	f000 f825 	bl	8002118 <HAL_RCC_GetSysClockFreq>
 80020ce:	4601      	mov	r1, r0
 80020d0:	4b0c      	ldr	r3, [pc, #48]	; (8002104 <HAL_RCC_ClockConfig+0x264>)
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	091b      	lsrs	r3, r3, #4
 80020d6:	f003 030f 	and.w	r3, r3, #15
 80020da:	4a0c      	ldr	r2, [pc, #48]	; (800210c <HAL_RCC_ClockConfig+0x26c>)
 80020dc:	5cd3      	ldrb	r3, [r2, r3]
 80020de:	f003 031f 	and.w	r3, r3, #31
 80020e2:	fa21 f303 	lsr.w	r3, r1, r3
 80020e6:	4a0a      	ldr	r2, [pc, #40]	; (8002110 <HAL_RCC_ClockConfig+0x270>)
 80020e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80020ea:	4b0a      	ldr	r3, [pc, #40]	; (8002114 <HAL_RCC_ClockConfig+0x274>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4618      	mov	r0, r3
 80020f0:	f7fe fef0 	bl	8000ed4 <HAL_InitTick>
 80020f4:	4603      	mov	r3, r0
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3718      	adds	r7, #24
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	40022000 	.word	0x40022000
 8002104:	40021000 	.word	0x40021000
 8002108:	04c4b400 	.word	0x04c4b400
 800210c:	080024f4 	.word	0x080024f4
 8002110:	20000000 	.word	0x20000000
 8002114:	20000004 	.word	0x20000004

08002118 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002118:	b480      	push	{r7}
 800211a:	b087      	sub	sp, #28
 800211c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800211e:	4b2c      	ldr	r3, [pc, #176]	; (80021d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	f003 030c 	and.w	r3, r3, #12
 8002126:	2b04      	cmp	r3, #4
 8002128:	d102      	bne.n	8002130 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800212a:	4b2a      	ldr	r3, [pc, #168]	; (80021d4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800212c:	613b      	str	r3, [r7, #16]
 800212e:	e047      	b.n	80021c0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002130:	4b27      	ldr	r3, [pc, #156]	; (80021d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	f003 030c 	and.w	r3, r3, #12
 8002138:	2b08      	cmp	r3, #8
 800213a:	d102      	bne.n	8002142 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800213c:	4b26      	ldr	r3, [pc, #152]	; (80021d8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800213e:	613b      	str	r3, [r7, #16]
 8002140:	e03e      	b.n	80021c0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002142:	4b23      	ldr	r3, [pc, #140]	; (80021d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	f003 030c 	and.w	r3, r3, #12
 800214a:	2b0c      	cmp	r3, #12
 800214c:	d136      	bne.n	80021bc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800214e:	4b20      	ldr	r3, [pc, #128]	; (80021d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002150:	68db      	ldr	r3, [r3, #12]
 8002152:	f003 0303 	and.w	r3, r3, #3
 8002156:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002158:	4b1d      	ldr	r3, [pc, #116]	; (80021d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	091b      	lsrs	r3, r3, #4
 800215e:	f003 030f 	and.w	r3, r3, #15
 8002162:	3301      	adds	r3, #1
 8002164:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	2b03      	cmp	r3, #3
 800216a:	d10c      	bne.n	8002186 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800216c:	4a1a      	ldr	r2, [pc, #104]	; (80021d8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	fbb2 f3f3 	udiv	r3, r2, r3
 8002174:	4a16      	ldr	r2, [pc, #88]	; (80021d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002176:	68d2      	ldr	r2, [r2, #12]
 8002178:	0a12      	lsrs	r2, r2, #8
 800217a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800217e:	fb02 f303 	mul.w	r3, r2, r3
 8002182:	617b      	str	r3, [r7, #20]
      break;
 8002184:	e00c      	b.n	80021a0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002186:	4a13      	ldr	r2, [pc, #76]	; (80021d4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	fbb2 f3f3 	udiv	r3, r2, r3
 800218e:	4a10      	ldr	r2, [pc, #64]	; (80021d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002190:	68d2      	ldr	r2, [r2, #12]
 8002192:	0a12      	lsrs	r2, r2, #8
 8002194:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002198:	fb02 f303 	mul.w	r3, r2, r3
 800219c:	617b      	str	r3, [r7, #20]
      break;
 800219e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80021a0:	4b0b      	ldr	r3, [pc, #44]	; (80021d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	0e5b      	lsrs	r3, r3, #25
 80021a6:	f003 0303 	and.w	r3, r3, #3
 80021aa:	3301      	adds	r3, #1
 80021ac:	005b      	lsls	r3, r3, #1
 80021ae:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80021b0:	697a      	ldr	r2, [r7, #20]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80021b8:	613b      	str	r3, [r7, #16]
 80021ba:	e001      	b.n	80021c0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80021bc:	2300      	movs	r3, #0
 80021be:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80021c0:	693b      	ldr	r3, [r7, #16]
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	371c      	adds	r7, #28
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr
 80021ce:	bf00      	nop
 80021d0:	40021000 	.word	0x40021000
 80021d4:	00f42400 	.word	0x00f42400
 80021d8:	016e3600 	.word	0x016e3600

080021dc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80021dc:	b480      	push	{r7}
 80021de:	b087      	sub	sp, #28
 80021e0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80021e2:	4b1e      	ldr	r3, [pc, #120]	; (800225c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80021e4:	68db      	ldr	r3, [r3, #12]
 80021e6:	f003 0303 	and.w	r3, r3, #3
 80021ea:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80021ec:	4b1b      	ldr	r3, [pc, #108]	; (800225c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	091b      	lsrs	r3, r3, #4
 80021f2:	f003 030f 	and.w	r3, r3, #15
 80021f6:	3301      	adds	r3, #1
 80021f8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	2b03      	cmp	r3, #3
 80021fe:	d10c      	bne.n	800221a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002200:	4a17      	ldr	r2, [pc, #92]	; (8002260 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	fbb2 f3f3 	udiv	r3, r2, r3
 8002208:	4a14      	ldr	r2, [pc, #80]	; (800225c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800220a:	68d2      	ldr	r2, [r2, #12]
 800220c:	0a12      	lsrs	r2, r2, #8
 800220e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002212:	fb02 f303 	mul.w	r3, r2, r3
 8002216:	617b      	str	r3, [r7, #20]
    break;
 8002218:	e00c      	b.n	8002234 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800221a:	4a12      	ldr	r2, [pc, #72]	; (8002264 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002222:	4a0e      	ldr	r2, [pc, #56]	; (800225c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002224:	68d2      	ldr	r2, [r2, #12]
 8002226:	0a12      	lsrs	r2, r2, #8
 8002228:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800222c:	fb02 f303 	mul.w	r3, r2, r3
 8002230:	617b      	str	r3, [r7, #20]
    break;
 8002232:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002234:	4b09      	ldr	r3, [pc, #36]	; (800225c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	0e5b      	lsrs	r3, r3, #25
 800223a:	f003 0303 	and.w	r3, r3, #3
 800223e:	3301      	adds	r3, #1
 8002240:	005b      	lsls	r3, r3, #1
 8002242:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002244:	697a      	ldr	r2, [r7, #20]
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	fbb2 f3f3 	udiv	r3, r2, r3
 800224c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800224e:	687b      	ldr	r3, [r7, #4]
}
 8002250:	4618      	mov	r0, r3
 8002252:	371c      	adds	r7, #28
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr
 800225c:	40021000 	.word	0x40021000
 8002260:	016e3600 	.word	0x016e3600
 8002264:	00f42400 	.word	0x00f42400

08002268 <arm_q31_to_float>:
 8002268:	b470      	push	{r4, r5, r6}
 800226a:	0896      	lsrs	r6, r2, #2
 800226c:	d02f      	beq.n	80022ce <arm_q31_to_float+0x66>
 800226e:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80022f0 <arm_q31_to_float+0x88>
 8002272:	f101 0410 	add.w	r4, r1, #16
 8002276:	f100 0310 	add.w	r3, r0, #16
 800227a:	4635      	mov	r5, r6
 800227c:	ed53 7a04 	vldr	s15, [r3, #-16]
 8002280:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002284:	3d01      	subs	r5, #1
 8002286:	ee67 7a87 	vmul.f32	s15, s15, s14
 800228a:	f103 0310 	add.w	r3, r3, #16
 800228e:	ed44 7a04 	vstr	s15, [r4, #-16]
 8002292:	ed53 7a07 	vldr	s15, [r3, #-28]	; 0xffffffe4
 8002296:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800229a:	f104 0410 	add.w	r4, r4, #16
 800229e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022a2:	ed44 7a07 	vstr	s15, [r4, #-28]	; 0xffffffe4
 80022a6:	ed53 7a06 	vldr	s15, [r3, #-24]	; 0xffffffe8
 80022aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022b2:	ed44 7a06 	vstr	s15, [r4, #-24]	; 0xffffffe8
 80022b6:	ed53 7a05 	vldr	s15, [r3, #-20]	; 0xffffffec
 80022ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022c2:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 80022c6:	d1d9      	bne.n	800227c <arm_q31_to_float+0x14>
 80022c8:	0136      	lsls	r6, r6, #4
 80022ca:	4431      	add	r1, r6
 80022cc:	4430      	add	r0, r6
 80022ce:	f012 0203 	ands.w	r2, r2, #3
 80022d2:	d00b      	beq.n	80022ec <arm_q31_to_float+0x84>
 80022d4:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80022f0 <arm_q31_to_float+0x88>
 80022d8:	ecf0 7a01 	vldmia	r0!, {s15}
 80022dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022e0:	3a01      	subs	r2, #1
 80022e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022e6:	ece1 7a01 	vstmia	r1!, {s15}
 80022ea:	d1f5      	bne.n	80022d8 <arm_q31_to_float+0x70>
 80022ec:	bc70      	pop	{r4, r5, r6}
 80022ee:	4770      	bx	lr
 80022f0:	30000000 	.word	0x30000000

080022f4 <arm_float_to_q31>:
 80022f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80022f8:	ea5f 0892 	movs.w	r8, r2, lsr #2
 80022fc:	ed2d 8b04 	vpush	{d8-d9}
 8002300:	4617      	mov	r7, r2
 8002302:	4605      	mov	r5, r0
 8002304:	460e      	mov	r6, r1
 8002306:	f000 808d 	beq.w	8002424 <arm_float_to_q31+0x130>
 800230a:	ed9f 9a5d 	vldr	s18, [pc, #372]	; 8002480 <arm_float_to_q31+0x18c>
 800230e:	f100 0910 	add.w	r9, r0, #16
 8002312:	f101 0410 	add.w	r4, r1, #16
 8002316:	46c2      	mov	sl, r8
 8002318:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
 800231c:	eebe 8a00 	vmov.f32	s16, #224	; 0xbf000000 -0.5
 8002320:	ed59 7a04 	vldr	s15, [r9, #-16]
 8002324:	ee67 7a89 	vmul.f32	s15, s15, s18
 8002328:	f109 0910 	add.w	r9, r9, #16
 800232c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002330:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002334:	bfd4      	ite	le
 8002336:	eeb0 7a48 	vmovle.f32	s14, s16
 800233a:	eeb0 7a68 	vmovgt.f32	s14, s17
 800233e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002342:	3410      	adds	r4, #16
 8002344:	ee17 0a90 	vmov	r0, s15
 8002348:	f7fe f972 	bl	8000630 <__aeabi_f2lz>
 800234c:	17ca      	asrs	r2, r1, #31
 800234e:	ebb1 7fe0 	cmp.w	r1, r0, asr #31
 8002352:	f082 4300 	eor.w	r3, r2, #2147483648	; 0x80000000
 8002356:	ea6f 0303 	mvn.w	r3, r3
 800235a:	bf08      	it	eq
 800235c:	4603      	moveq	r3, r0
 800235e:	f844 3c20 	str.w	r3, [r4, #-32]
 8002362:	ed59 7a07 	vldr	s15, [r9, #-28]	; 0xffffffe4
 8002366:	ee67 7a89 	vmul.f32	s15, s15, s18
 800236a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800236e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002372:	bfd4      	ite	le
 8002374:	eeb0 7a48 	vmovle.f32	s14, s16
 8002378:	eeb0 7a68 	vmovgt.f32	s14, s17
 800237c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002380:	ee17 0a90 	vmov	r0, s15
 8002384:	f7fe f954 	bl	8000630 <__aeabi_f2lz>
 8002388:	17ca      	asrs	r2, r1, #31
 800238a:	ebb1 7fe0 	cmp.w	r1, r0, asr #31
 800238e:	f082 4300 	eor.w	r3, r2, #2147483648	; 0x80000000
 8002392:	ea6f 0303 	mvn.w	r3, r3
 8002396:	bf08      	it	eq
 8002398:	4603      	moveq	r3, r0
 800239a:	f844 3c1c 	str.w	r3, [r4, #-28]
 800239e:	ed59 7a06 	vldr	s15, [r9, #-24]	; 0xffffffe8
 80023a2:	ee67 7a89 	vmul.f32	s15, s15, s18
 80023a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80023aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023ae:	bfd4      	ite	le
 80023b0:	eeb0 7a48 	vmovle.f32	s14, s16
 80023b4:	eeb0 7a68 	vmovgt.f32	s14, s17
 80023b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023bc:	ee17 0a90 	vmov	r0, s15
 80023c0:	f7fe f936 	bl	8000630 <__aeabi_f2lz>
 80023c4:	17ca      	asrs	r2, r1, #31
 80023c6:	ebb1 7fe0 	cmp.w	r1, r0, asr #31
 80023ca:	f082 4300 	eor.w	r3, r2, #2147483648	; 0x80000000
 80023ce:	ea6f 0303 	mvn.w	r3, r3
 80023d2:	bf08      	it	eq
 80023d4:	4603      	moveq	r3, r0
 80023d6:	f844 3c18 	str.w	r3, [r4, #-24]
 80023da:	ed59 7a05 	vldr	s15, [r9, #-20]	; 0xffffffec
 80023de:	ee67 7a89 	vmul.f32	s15, s15, s18
 80023e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80023e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023ea:	bfd4      	ite	le
 80023ec:	eeb0 7a48 	vmovle.f32	s14, s16
 80023f0:	eeb0 7a68 	vmovgt.f32	s14, s17
 80023f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023f8:	ee17 0a90 	vmov	r0, s15
 80023fc:	f7fe f918 	bl	8000630 <__aeabi_f2lz>
 8002400:	17ca      	asrs	r2, r1, #31
 8002402:	ebb1 7fe0 	cmp.w	r1, r0, asr #31
 8002406:	f082 4300 	eor.w	r3, r2, #2147483648	; 0x80000000
 800240a:	ea6f 0303 	mvn.w	r3, r3
 800240e:	bf08      	it	eq
 8002410:	4603      	moveq	r3, r0
 8002412:	f1ba 0a01 	subs.w	sl, sl, #1
 8002416:	f844 3c14 	str.w	r3, [r4, #-20]
 800241a:	d181      	bne.n	8002320 <arm_float_to_q31+0x2c>
 800241c:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8002420:	4445      	add	r5, r8
 8002422:	4446      	add	r6, r8
 8002424:	f017 0703 	ands.w	r7, r7, #3
 8002428:	d025      	beq.n	8002476 <arm_float_to_q31+0x182>
 800242a:	ed9f 9a15 	vldr	s18, [pc, #84]	; 8002480 <arm_float_to_q31+0x18c>
 800242e:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
 8002432:	eebe 8a00 	vmov.f32	s16, #224	; 0xbf000000 -0.5
 8002436:	ecf5 7a01 	vldmia	r5!, {s15}
 800243a:	ee67 7a89 	vmul.f32	s15, s15, s18
 800243e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002442:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002446:	bfd4      	ite	le
 8002448:	eeb0 7a48 	vmovle.f32	s14, s16
 800244c:	eeb0 7a68 	vmovgt.f32	s14, s17
 8002450:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002454:	ee17 0a90 	vmov	r0, s15
 8002458:	f7fe f8ea 	bl	8000630 <__aeabi_f2lz>
 800245c:	17cc      	asrs	r4, r1, #31
 800245e:	ebb1 7fe0 	cmp.w	r1, r0, asr #31
 8002462:	f084 4300 	eor.w	r3, r4, #2147483648	; 0x80000000
 8002466:	ea6f 0303 	mvn.w	r3, r3
 800246a:	bf08      	it	eq
 800246c:	4603      	moveq	r3, r0
 800246e:	3f01      	subs	r7, #1
 8002470:	f846 3b04 	str.w	r3, [r6], #4
 8002474:	d1df      	bne.n	8002436 <arm_float_to_q31+0x142>
 8002476:	ecbd 8b04 	vpop	{d8-d9}
 800247a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800247e:	bf00      	nop
 8002480:	4f000000 	.word	0x4f000000

08002484 <__libc_init_array>:
 8002484:	b570      	push	{r4, r5, r6, lr}
 8002486:	4e0d      	ldr	r6, [pc, #52]	; (80024bc <__libc_init_array+0x38>)
 8002488:	4c0d      	ldr	r4, [pc, #52]	; (80024c0 <__libc_init_array+0x3c>)
 800248a:	1ba4      	subs	r4, r4, r6
 800248c:	10a4      	asrs	r4, r4, #2
 800248e:	2500      	movs	r5, #0
 8002490:	42a5      	cmp	r5, r4
 8002492:	d109      	bne.n	80024a8 <__libc_init_array+0x24>
 8002494:	4e0b      	ldr	r6, [pc, #44]	; (80024c4 <__libc_init_array+0x40>)
 8002496:	4c0c      	ldr	r4, [pc, #48]	; (80024c8 <__libc_init_array+0x44>)
 8002498:	f000 f820 	bl	80024dc <_init>
 800249c:	1ba4      	subs	r4, r4, r6
 800249e:	10a4      	asrs	r4, r4, #2
 80024a0:	2500      	movs	r5, #0
 80024a2:	42a5      	cmp	r5, r4
 80024a4:	d105      	bne.n	80024b2 <__libc_init_array+0x2e>
 80024a6:	bd70      	pop	{r4, r5, r6, pc}
 80024a8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80024ac:	4798      	blx	r3
 80024ae:	3501      	adds	r5, #1
 80024b0:	e7ee      	b.n	8002490 <__libc_init_array+0xc>
 80024b2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80024b6:	4798      	blx	r3
 80024b8:	3501      	adds	r5, #1
 80024ba:	e7f2      	b.n	80024a2 <__libc_init_array+0x1e>
 80024bc:	08002504 	.word	0x08002504
 80024c0:	08002504 	.word	0x08002504
 80024c4:	08002504 	.word	0x08002504
 80024c8:	08002508 	.word	0x08002508

080024cc <memset>:
 80024cc:	4402      	add	r2, r0
 80024ce:	4603      	mov	r3, r0
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d100      	bne.n	80024d6 <memset+0xa>
 80024d4:	4770      	bx	lr
 80024d6:	f803 1b01 	strb.w	r1, [r3], #1
 80024da:	e7f9      	b.n	80024d0 <memset+0x4>

080024dc <_init>:
 80024dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024de:	bf00      	nop
 80024e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024e2:	bc08      	pop	{r3}
 80024e4:	469e      	mov	lr, r3
 80024e6:	4770      	bx	lr

080024e8 <_fini>:
 80024e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024ea:	bf00      	nop
 80024ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024ee:	bc08      	pop	{r3}
 80024f0:	469e      	mov	lr, r3
 80024f2:	4770      	bx	lr
